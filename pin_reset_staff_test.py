import requests
import sys
import json
from datetime import datetime

class PinResetStaffTester:
    def __init__(self, base_url="https://rostersync-1.preview.emergentagent.com"):
        self.base_url = base_url
        self.tests_run = 0
        self.tests_passed = 0
        self.auth_token = None
        self.created_staff_ids = []

    def run_test(self, name, method, endpoint, expected_status, data=None, params=None, use_auth=False):
        """Run a single API test"""
        url = f"{self.base_url}/{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        # Add authentication header if required and available
        if use_auth and self.auth_token:
            headers['Authorization'] = f'Bearer {self.auth_token}'

        self.tests_run += 1
        print(f"\n🔍 Testing {name}...")
        print(f"   URL: {url}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers)
            elif method == 'DELETE':
                response = requests.delete(url, headers=headers)

            success = response.status_code == expected_status
            if success:
                self.tests_passed += 1
                print(f"✅ Passed - Status: {response.status_code}")
                try:
                    response_data = response.json()
                    if isinstance(response_data, dict):
                        print(f"   Response keys: {list(response_data.keys())}")
                        # Print important response data
                        if 'temp_pin' in response_data:
                            print(f"   Temp PIN: {response_data['temp_pin']}")
                        if 'message' in response_data:
                            print(f"   Message: {response_data['message']}")
                        if 'id' in response_data:
                            print(f"   ID: {response_data['id']}")
                        if 'name' in response_data:
                            print(f"   Name: {response_data['name']}")
                except:
                    print(f"   Response: {response.text[:100]}...")
            else:
                print(f"❌ Failed - Expected {expected_status}, got {response.status_code}")
                print(f"   Response: {response.text[:200]}...")

            return success, response.json() if response.status_code < 500 else {}

        except Exception as e:
            print(f"❌ Failed - Error: {str(e)}")
            return False, {}

    def authenticate_as_admin(self):
        """Authenticate as admin to get token for protected endpoints"""
        print(f"\n🔐 Authenticating as Admin...")
        
        login_data = {
            "username": "Admin",
            "pin": "0000"
        }
        
        success, response = self.run_test(
            "Admin Login",
            "POST",
            "api/auth/login",
            200,
            data=login_data
        )
        
        if success:
            self.auth_token = response.get('token')
            user_data = response.get('user', {})
            
            print(f"   ✅ Login successful")
            print(f"   User: {user_data.get('username')} ({user_data.get('role')})")
            print(f"   Token: {self.auth_token[:20]}..." if self.auth_token else "No token")
            
            return user_data.get('role') == 'admin'
        else:
            print(f"   ❌ Authentication failed")
            return False

    def test_staff_creation(self):
        """Test POST /api/staff endpoint for creating new staff"""
        print(f"\n👥 Testing Staff Creation (POST /api/staff)...")
        
        # Test 1: Create staff with valid name and active=True
        test_staff_1 = {
            "id": "",  # Will be auto-generated by backend
            "name": "John Smith",
            "active": True
        }
        
        success, response = self.run_test(
            "Create Staff Member - John Smith",
            "POST",
            "api/staff",
            200,
            data=test_staff_1
        )
        
        if success and 'id' in response:
            staff_id = response['id']
            self.created_staff_ids.append(staff_id)
            print(f"   ✅ Created staff member: {response['name']} (ID: {staff_id})")
            
            # Verify the staff member was created with correct data
            if response.get('name') == test_staff_1['name'] and response.get('active') == test_staff_1['active']:
                print(f"   ✅ Staff data matches input")
            else:
                print(f"   ❌ Staff data mismatch")
                return False
        else:
            print(f"   ❌ Failed to create staff member")
            return False
        
        # Test 2: Create staff with active=False
        test_staff_2 = {
            "id": "",  # Will be auto-generated by backend
            "name": "Jane Doe",
            "active": False
        }
        
        success, response = self.run_test(
            "Create Staff Member - Jane Doe (Inactive)",
            "POST",
            "api/staff",
            200,
            data=test_staff_2
        )
        
        if success and 'id' in response:
            staff_id = response['id']
            self.created_staff_ids.append(staff_id)
            print(f"   ✅ Created inactive staff member: {response['name']} (ID: {staff_id})")
        else:
            print(f"   ❌ Failed to create inactive staff member")
            return False
        
        # Test 3: Create staff with missing name (should fail)
        test_staff_invalid = {
            "id": "",
            "active": True
        }
        
        success, response = self.run_test(
            "Create Staff with Missing Name (Should Fail)",
            "POST",
            "api/staff",
            422,  # Expect validation error
            data=test_staff_invalid
        )
        
        if success:  # Success means we got expected 422 status
            print(f"   ✅ Missing name correctly rejected")
        else:
            print(f"   ❌ Missing name validation failed")
            return False
        
        print(f"   ✅ All staff creation tests passed")
        return True

    def test_pin_reset_existing_user(self):
        """Test PIN reset for existing user with email"""
        print(f"\n🔑 Testing PIN Reset for Existing User...")
        
        if not self.auth_token:
            print("   ⚠️  No admin token available - skipping PIN reset tests")
            return False
        
        # Test 1: Reset PIN for admin user (existing user with email)
        reset_request = {
            "email": "jeremy.tomlinson88@gmail.com"  # Admin's email from backend code
        }
        
        success, response = self.run_test(
            "Reset PIN for Existing Admin User",
            "POST",
            "api/admin/reset_pin",
            200,
            data=reset_request,
            use_auth=True
        )
        
        if success:
            temp_pin = response.get('temp_pin')
            username = response.get('username')
            message = response.get('message')
            
            print(f"   ✅ PIN reset successful")
            print(f"   Message: {message}")
            print(f"   Username: {username}")
            print(f"   Temp PIN: {temp_pin}")
            
            # Verify temp PIN is 4 digits
            if temp_pin and len(temp_pin) == 4 and temp_pin.isdigit():
                print(f"   ✅ Temp PIN format is correct (4 digits)")
            else:
                print(f"   ❌ Temp PIN format is incorrect: {temp_pin}")
                return False
            
            return True
        else:
            print(f"   ❌ PIN reset failed for existing user")
            return False

    def test_pin_reset_staff_without_user_account(self):
        """Test PIN reset for staff member without user account (should auto-create)"""
        print(f"\n🔑 Testing PIN Reset for Staff Without User Account...")
        
        if not self.auth_token:
            print("   ⚠️  No admin token available - skipping PIN reset tests")
            return False
        
        if not self.created_staff_ids:
            print("   ⚠️  No created staff members available for testing")
            return False
        
        # Use the first created staff member (John Smith)
        # Generate email pattern like "johnsmith@company.com"
        staff_email = "johnsmith@company.com"
        
        reset_request = {
            "email": staff_email
        }
        
        success, response = self.run_test(
            "Reset PIN for Staff Without User Account (Auto-Create)",
            "POST",
            "api/admin/reset_pin",
            200,
            data=reset_request,
            use_auth=True
        )
        
        if success:
            temp_pin = response.get('temp_pin')
            username = response.get('username')
            message = response.get('message')
            
            print(f"   ✅ PIN reset successful with auto-created user account")
            print(f"   Message: {message}")
            print(f"   Username: {username}")
            print(f"   Temp PIN: {temp_pin}")
            
            # Verify temp PIN is 4 digits
            if temp_pin and len(temp_pin) == 4 and temp_pin.isdigit():
                print(f"   ✅ Temp PIN format is correct (4 digits)")
            else:
                print(f"   ❌ Temp PIN format is incorrect: {temp_pin}")
                return False
            
            # Verify username was generated correctly
            if username and username == "johnsmith":
                print(f"   ✅ Username generated correctly from staff name")
            else:
                print(f"   ❌ Username generation incorrect: {username}")
                return False
            
            return True
        else:
            print(f"   ❌ PIN reset failed for staff without user account")
            return False

    def test_pin_reset_real_email(self):
        """Test PIN reset with real email format"""
        print(f"\n🔑 Testing PIN Reset with Real Email Format...")
        
        if not self.auth_token:
            print("   ⚠️  No admin token available - skipping PIN reset tests")
            return False
        
        # Test with a real-looking email for Jane Doe (second created staff)
        real_email = "jane.doe@example.com"
        
        # First, we need to create a user account with this email for testing
        # Since we can't directly create users via API, we'll test with generated email pattern
        staff_email = "janedoe@company.com"
        
        reset_request = {
            "email": staff_email
        }
        
        success, response = self.run_test(
            "Reset PIN with Generated Email Pattern",
            "POST",
            "api/admin/reset_pin",
            200,
            data=reset_request,
            use_auth=True
        )
        
        if success:
            temp_pin = response.get('temp_pin')
            username = response.get('username')
            message = response.get('message')
            
            print(f"   ✅ PIN reset successful")
            print(f"   Message: {message}")
            print(f"   Username: {username}")
            print(f"   Temp PIN: {temp_pin}")
            
            return True
        else:
            print(f"   ❌ PIN reset failed")
            return False

    def test_pin_reset_missing_email(self):
        """Test PIN reset with missing email (should return 400 error)"""
        print(f"\n🔑 Testing PIN Reset with Missing Email...")
        
        if not self.auth_token:
            print("   ⚠️  No admin token available - skipping PIN reset tests")
            return False
        
        # Test with empty request body
        reset_request = {}
        
        success, response = self.run_test(
            "Reset PIN with Missing Email (Should Fail)",
            "POST",
            "api/admin/reset_pin",
            400,  # Expect bad request
            data=reset_request,
            use_auth=True
        )
        
        if success:  # Success means we got expected 400 status
            print(f"   ✅ Missing email correctly rejected")
            return True
        else:
            print(f"   ❌ Missing email validation failed")
            return False

    def test_pin_reset_without_admin_token(self):
        """Test PIN reset without admin token (should return 403 error)"""
        print(f"\n🔑 Testing PIN Reset without Admin Token...")
        
        reset_request = {
            "email": "test@example.com"
        }
        
        success, response = self.run_test(
            "Reset PIN without Admin Token (Should Fail)",
            "POST",
            "api/admin/reset_pin",
            403,  # Expect forbidden (admin access required)
            data=reset_request,
            use_auth=False  # Don't use auth token
        )
        
        if success:  # Success means we got expected 403 status
            print(f"   ✅ Unauthorized access correctly blocked")
            return True
        else:
            print(f"   ❌ Unauthorized access was not blocked properly")
            return False

    def test_pin_reset_nonexistent_email(self):
        """Test PIN reset with non-existent email"""
        print(f"\n🔑 Testing PIN Reset with Non-existent Email...")
        
        if not self.auth_token:
            print("   ⚠️  No admin token available - skipping PIN reset tests")
            return False
        
        reset_request = {
            "email": "nonexistent@nowhere.com"
        }
        
        success, response = self.run_test(
            "Reset PIN for Non-existent Email",
            "POST",
            "api/admin/reset_pin",
            404,  # Expect not found
            data=reset_request,
            use_auth=True
        )
        
        if success:  # Success means we got expected 404 status
            print(f"   ✅ Non-existent email correctly handled")
            return True
        else:
            print(f"   ❌ Non-existent email handling failed")
            return False

    def run_all_tests(self):
        """Run all PIN reset and staff management tests"""
        print("🚀 Starting PIN Reset and Staff Management Tests")
        print("=" * 60)
        
        # Step 1: Authenticate as admin
        if not self.authenticate_as_admin():
            print("❌ Admin authentication failed - cannot proceed with tests")
            return False
        
        # Step 2: Test staff creation
        staff_creation_passed = self.test_staff_creation()
        
        # Step 3: Test PIN reset scenarios
        pin_reset_existing_passed = self.test_pin_reset_existing_user()
        pin_reset_auto_create_passed = self.test_pin_reset_staff_without_user_account()
        pin_reset_real_email_passed = self.test_pin_reset_real_email()
        pin_reset_missing_email_passed = self.test_pin_reset_missing_email()
        pin_reset_no_auth_passed = self.test_pin_reset_without_admin_token()
        pin_reset_nonexistent_passed = self.test_pin_reset_nonexistent_email()
        
        # Summary
        print("\n" + "=" * 60)
        print("🎯 TEST SUMMARY")
        print("=" * 60)
        
        all_tests_passed = all([
            staff_creation_passed,
            pin_reset_existing_passed,
            pin_reset_auto_create_passed,
            pin_reset_real_email_passed,
            pin_reset_missing_email_passed,
            pin_reset_no_auth_passed,
            pin_reset_nonexistent_passed
        ])
        
        print(f"Staff Creation Tests: {'✅ PASSED' if staff_creation_passed else '❌ FAILED'}")
        print(f"PIN Reset - Existing User: {'✅ PASSED' if pin_reset_existing_passed else '❌ FAILED'}")
        print(f"PIN Reset - Auto-Create User: {'✅ PASSED' if pin_reset_auto_create_passed else '❌ FAILED'}")
        print(f"PIN Reset - Real Email: {'✅ PASSED' if pin_reset_real_email_passed else '❌ FAILED'}")
        print(f"PIN Reset - Missing Email: {'✅ PASSED' if pin_reset_missing_email_passed else '❌ FAILED'}")
        print(f"PIN Reset - No Auth Token: {'✅ PASSED' if pin_reset_no_auth_passed else '❌ FAILED'}")
        print(f"PIN Reset - Nonexistent Email: {'✅ PASSED' if pin_reset_nonexistent_passed else '❌ FAILED'}")
        
        print(f"\nOverall Tests: {self.tests_passed}/{self.tests_run} passed")
        
        if all_tests_passed:
            print("🎉 ALL PIN RESET AND STAFF MANAGEMENT TESTS PASSED!")
        else:
            print("❌ Some tests failed - see details above")
        
        return all_tests_passed

if __name__ == "__main__":
    tester = PinResetStaffTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)