import requests
import sys
import json
from datetime import datetime, timedelta

class ShiftRosterAPITester:
    def __init__(self, base_url="https://rostersync-1.preview.emergentagent.com"):
        self.base_url = base_url
        self.tests_run = 0
        self.tests_passed = 0
        self.staff_data = []
        self.shift_templates = []
        self.roster_entries = []
        self.auth_token = None

    def run_test(self, name, method, endpoint, expected_status, data=None, params=None, use_auth=False):
        """Run a single API test"""
        url = f"{self.base_url}/{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        # Add authentication header if required and available
        if use_auth and self.auth_token:
            headers['Authorization'] = f'Bearer {self.auth_token}'

        self.tests_run += 1
        print(f"\nüîç Testing {name}...")
        print(f"   URL: {url}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers)
            elif method == 'DELETE':
                response = requests.delete(url, headers=headers)

            success = response.status_code == expected_status
            if success:
                self.tests_passed += 1
                print(f"‚úÖ Passed - Status: {response.status_code}")
                try:
                    response_data = response.json()
                    if isinstance(response_data, list) and len(response_data) > 0:
                        print(f"   Response: {len(response_data)} items returned")
                    elif isinstance(response_data, dict):
                        print(f"   Response keys: {list(response_data.keys())}")
                except:
                    print(f"   Response: {response.text[:100]}...")
            else:
                print(f"‚ùå Failed - Expected {expected_status}, got {response.status_code}")
                print(f"   Response: {response.text[:200]}...")

            return success, response.json() if response.status_code < 400 else {}

        except Exception as e:
            print(f"‚ùå Failed - Error: {str(e)}")
            return False, {}

    def test_authentication_system(self):
        """Test authentication with Admin/0000 credentials"""
        print(f"\nüîê Testing Authentication System...")
        
        # Test login with Admin/0000 credentials
        login_data = {
            "username": "Admin",
            "pin": "0000"
        }
        
        success, response = self.run_test(
            "Admin Login with PIN 0000",
            "POST",
            "api/auth/login",
            200,
            data=login_data
        )
        
        if success:
            self.auth_token = response.get('token')
            user_data = response.get('user', {})
            expires_at = response.get('expires_at')
            
            print(f"   ‚úÖ Login successful")
            print(f"   User: {user_data.get('username')} ({user_data.get('role')})")
            print(f"   Token received: {self.auth_token[:20]}..." if self.auth_token else "No token")
            print(f"   Session expires: {expires_at}")
            
            # Verify user role is admin
            if user_data.get('role') == 'admin':
                print(f"   ‚úÖ Admin role confirmed")
            else:
                print(f"   ‚ùå Expected admin role, got: {user_data.get('role')}")
                
            return True
        else:
            print(f"   ‚ùå Authentication failed")
            return False

    def test_health_check(self):
        """Test health endpoint"""
        success, response = self.run_test(
            "Health Check",
            "GET",
            "api/health",
            200
        )
        return success

    def test_get_staff(self):
        """Test getting all staff members"""
        success, response = self.run_test(
            "Get All Staff",
            "GET",
            "api/staff",
            200
        )
        if success:
            self.staff_data = response
            print(f"   Found {len(response)} staff members")
            expected_staff = ["Angela", "Chanelle", "Rose", "Caroline", "Nox", "Elina",
                            "Kayla", "Rhet", "Nikita", "Molly", "Felicity", "Issey"]
            actual_names = [staff['name'] for staff in response]
            missing_staff = [name for name in expected_staff if name not in actual_names]
            if missing_staff:
                print(f"   ‚ö†Ô∏è  Missing expected staff: {missing_staff}")
            else:
                print(f"   ‚úÖ All 12 expected staff members found")
        return success

    def test_create_staff(self):
        """Test creating a new staff member"""
        test_staff = {
            "name": "Test Staff Member",
            "active": True
        }
        success, response = self.run_test(
            "Create Staff Member",
            "POST",
            "api/staff",
            200,
            data=test_staff
        )
        if success and 'id' in response:
            print(f"   Created staff with ID: {response['id']}")
            return response['id']
        return None

    def test_get_shift_templates(self):
        """Test getting shift templates"""
        success, response = self.run_test(
            "Get Shift Templates",
            "GET",
            "api/shift-templates",
            200
        )
        if success:
            self.shift_templates = response
            print(f"   Found {len(response)} shift templates")
            # Check for expected pattern: 7 days * 4 shifts = 28 templates
            if len(response) == 28:
                print(f"   ‚úÖ Expected 28 shift templates found")
            else:
                print(f"   ‚ö†Ô∏è  Expected 28 shift templates, found {len(response)}")
            
            # Check day distribution
            day_counts = {}
            for template in response:
                day = template['day_of_week']
                day_counts[day] = day_counts.get(day, 0) + 1
            
            print(f"   Shifts per day: {day_counts}")
        return success

    def test_get_settings(self):
        """Test getting settings"""
        success, response = self.run_test(
            "Get Settings",
            "GET",
            "api/settings",
            200
        )
        if success:
            print(f"   Pay mode: {response.get('pay_mode', 'N/A')}")
            rates = response.get('rates', {})
            print(f"   Weekday day rate: ${rates.get('weekday_day', 0)}")
            print(f"   Saturday rate: ${rates.get('saturday', 0)}")
            print(f"   Sunday rate: ${rates.get('sunday', 0)}")
            print(f"   Sleepover allowance: ${rates.get('sleepover_default', 0)}")
        return success

    def test_generate_roster(self):
        """Test generating roster for current month"""
        current_month = datetime.now().strftime("%Y-%m")
        success, response = self.run_test(
            f"Generate Roster for {current_month}",
            "POST",
            f"api/generate-roster/{current_month}",
            200
        )
        if success:
            print(f"   {response.get('message', 'Roster generated')}")
        return success

    def test_get_roster(self):
        """Test getting roster for current month"""
        current_month = datetime.now().strftime("%Y-%m")
        success, response = self.run_test(
            f"Get Roster for {current_month}",
            "GET",
            "api/roster",
            200,
            params={"month": current_month}
        )
        if success:
            self.roster_entries = response
            print(f"   Found {len(response)} roster entries")
            if len(response) > 0:
                # Analyze first entry for pay calculation
                entry = response[0]
                print(f"   Sample entry: {entry['date']} {entry['start_time']}-{entry['end_time']}")
                print(f"   Hours: {entry.get('hours_worked', 0)}, Pay: ${entry.get('total_pay', 0)}")
        return success

    def test_pay_calculations(self):
        """Test pay calculation accuracy - FOCUS ON SCHADS EVENING SHIFT RULES"""
        print(f"\nüí∞ Testing SCHADS Award Pay Calculations...")
        print("üéØ CRITICAL TEST: Evening shift rule - 'Starts after 8:00pm OR extends past 8:00pm'")
        
        # Test data for SCHADS evening shift scenarios
        test_cases = [
            {
                "name": "15:30-23:30 shift (extends past 8pm) - CRITICAL TEST",
                "date": "2025-01-06",  # Monday
                "start_time": "15:30",
                "end_time": "23:30",
                "expected_hours": 8.0,
                "expected_rate": 44.50,  # Evening rate
                "expected_pay": 356.00,  # 8 * 44.50
                "shift_type": "EVENING"
            },
            {
                "name": "15:00-20:00 shift (extends past 8pm) - CRITICAL TEST",
                "date": "2025-01-06",  # Monday
                "start_time": "15:00",
                "end_time": "20:00",
                "expected_hours": 5.0,
                "expected_rate": 44.50,  # Evening rate
                "expected_pay": 222.50,  # 5 * 44.50
                "shift_type": "EVENING"
            },
            {
                "name": "20:30-23:30 shift (starts after 8pm) - CRITICAL TEST",
                "date": "2025-01-06",  # Monday
                "start_time": "20:30",
                "end_time": "23:30",
                "expected_hours": 3.0,
                "expected_rate": 44.50,  # Evening rate
                "expected_pay": 133.50,  # 3 * 44.50
                "shift_type": "EVENING"
            },
            {
                "name": "07:30-15:30 shift (ends before 8pm) - CONTROL TEST",
                "date": "2025-01-06",  # Monday
                "start_time": "07:30",
                "end_time": "15:30",
                "expected_hours": 8.0,
                "expected_rate": 42.00,  # Day rate
                "expected_pay": 336.00,  # 8 * 42.00
                "shift_type": "DAY"
            },
            {
                "name": "Weekday Night Shift (23:30-07:30)",
                "date": "2025-01-06",  # Monday
                "start_time": "23:30",
                "end_time": "07:30",
                "expected_hours": 8.0,
                "expected_rate": 48.50,
                "expected_pay": 388.00,
                "is_sleepover": True,
                "expected_sleepover": 175.00,
                "shift_type": "NIGHT"
            },
            {
                "name": "Saturday Shift (07:30-15:30)",
                "date": "2025-01-11",  # Saturday
                "start_time": "07:30",
                "end_time": "15:30",
                "expected_hours": 8.0,
                "expected_rate": 57.50,
                "expected_pay": 460.00,
                "shift_type": "SATURDAY"
            },
            {
                "name": "Sunday Shift (07:30-15:30)",
                "date": "2025-01-12",  # Sunday
                "start_time": "07:30",
                "end_time": "15:30",
                "expected_hours": 8.0,
                "expected_rate": 74.00,
                "expected_pay": 592.00,
                "shift_type": "SUNDAY"
            }
        ]

        pay_tests_passed = 0
        critical_evening_tests_passed = 0
        critical_evening_tests_total = 3  # First 3 are the critical evening shift tests
        
        for i, test_case in enumerate(test_cases):
            is_critical = i < critical_evening_tests_total
            print(f"\n   {'üéØ CRITICAL: ' if is_critical else ''}Testing: {test_case['name']}")
            
            # Create roster entry (id will be auto-generated by backend)
            roster_entry = {
                "id": "",  # Will be auto-generated
                "date": test_case["date"],
                "shift_template_id": "test-template",
                "start_time": test_case["start_time"],
                "end_time": test_case["end_time"],
                "is_sleepover": test_case.get("is_sleepover", False),
                "is_public_holiday": False,
                "staff_id": None,
                "staff_name": None,
                "hours_worked": 0.0,
                "base_pay": 0.0,
                "sleepover_allowance": 0.0,
                "total_pay": 0.0
            }
            
            success, response = self.run_test(
                f"Create {test_case['name']}",
                "POST",
                "api/roster",
                200,
                data=roster_entry
            )
            
            if success:
                hours_worked = response.get('hours_worked', 0)
                total_pay = response.get('total_pay', 0)
                base_pay = response.get('base_pay', 0)
                sleepover_allowance = response.get('sleepover_allowance', 0)
                
                print(f"      Expected shift type: {test_case.get('shift_type', 'N/A')}")
                print(f"      Hours worked: {hours_worked} (expected: {test_case['expected_hours']})")
                print(f"      Base pay: ${base_pay}")
                print(f"      Sleepover allowance: ${sleepover_allowance}")
                print(f"      Total pay: ${total_pay} (expected: ${test_case['expected_pay']})")
                
                # Check calculations
                hours_correct = abs(hours_worked - test_case['expected_hours']) < 0.1
                
                if test_case.get('is_sleepover'):
                    # For sleepover shifts, total pay = sleepover allowance (in default mode)
                    pay_correct = abs(total_pay - test_case['expected_sleepover']) < 0.01
                else:
                    pay_correct = abs(total_pay - test_case['expected_pay']) < 0.01
                
                if hours_correct and pay_correct:
                    print(f"      ‚úÖ Pay calculation correct")
                    pay_tests_passed += 1
                    if is_critical:
                        critical_evening_tests_passed += 1
                else:
                    print(f"      ‚ùå Pay calculation incorrect")
                    if not hours_correct:
                        print(f"         Hours mismatch: got {hours_worked}, expected {test_case['expected_hours']}")
                    if not pay_correct:
                        expected = test_case['expected_sleepover'] if test_case.get('is_sleepover') else test_case['expected_pay']
                        print(f"         Pay mismatch: got ${total_pay}, expected ${expected}")
                    
                    if is_critical:
                        print(f"      üö® CRITICAL EVENING SHIFT TEST FAILED!")
                        print(f"         This indicates the SCHADS evening shift rule may not be working correctly")
            else:
                if is_critical:
                    print(f"      üö® CRITICAL TEST FAILED - Could not create roster entry")

        print(f"\n   üéØ CRITICAL Evening Shift Tests: {critical_evening_tests_passed}/{critical_evening_tests_total} passed")
        print(f"   üìä Total Pay calculation tests: {pay_tests_passed}/{len(test_cases)} passed")
        
        if critical_evening_tests_passed < critical_evening_tests_total:
            print(f"   ‚ùå CRITICAL ISSUE: Evening shift calculation logic needs attention!")
            print(f"      Expected: Shifts extending past 8:00pm should use evening rate ($44.50/hr)")
        else:
            print(f"   ‚úÖ All critical evening shift tests passed!")
        
        return pay_tests_passed == len(test_cases)

    def analyze_existing_pay_calculations(self):
        """Analyze existing roster entries to verify pay calculations"""
        if not self.roster_entries:
            print("‚ö†Ô∏è  No roster entries available for analysis")
            return False
        
        print(f"\nüí∞ Analyzing Existing Pay Calculations...")
        print(f"   Analyzing {len(self.roster_entries)} roster entries...")
        
        # Group by shift type
        shift_analysis = {
            'weekday_day': [],
            'weekday_evening': [],
            'weekday_night': [],
            'saturday': [],
            'sunday': [],
            'sleepover': []
        }
        
        for entry in self.roster_entries[:10]:  # Analyze first 10 entries
            date_obj = datetime.strptime(entry['date'], "%Y-%m-%d")
            day_of_week = date_obj.weekday()  # 0=Monday, 6=Sunday
            start_hour = int(entry['start_time'].split(':')[0])
            
            if entry.get('is_sleepover'):
                shift_analysis['sleepover'].append(entry)
            elif day_of_week == 5:  # Saturday
                shift_analysis['saturday'].append(entry)
            elif day_of_week == 6:  # Sunday
                shift_analysis['sunday'].append(entry)
            elif start_hour >= 22 or start_hour < 6:
                shift_analysis['weekday_night'].append(entry)
            elif start_hour >= 20:
                shift_analysis['weekday_evening'].append(entry)
            else:
                shift_analysis['weekday_day'].append(entry)
        
        # Expected rates
        expected_rates = {
            'weekday_day': 42.00,
            'weekday_evening': 44.50,
            'weekday_night': 48.50,
            'saturday': 57.50,
            'sunday': 74.00,
            'sleepover': 175.00  # Default sleepover allowance
        }
        
        analysis_passed = True
        
        for shift_type, entries in shift_analysis.items():
            if not entries:
                continue
                
            print(f"\n   {shift_type.replace('_', ' ').title()} Shifts:")
            for entry in entries[:3]:  # Check first 3 of each type
                hours = entry.get('hours_worked', 0)
                total_pay = entry.get('total_pay', 0)
                base_pay = entry.get('base_pay', 0)
                sleepover_allowance = entry.get('sleepover_allowance', 0)
                
                if shift_type == 'sleepover':
                    expected_pay = expected_rates[shift_type]
                    actual_pay = sleepover_allowance
                else:
                    expected_pay = hours * expected_rates[shift_type]
                    actual_pay = base_pay
                
                pay_correct = abs(actual_pay - expected_pay) < 0.01
                
                print(f"      {entry['date']} {entry['start_time']}-{entry['end_time']}: "
                      f"{hours}h, ${actual_pay:.2f} (expected: ${expected_pay:.2f}) "
                      f"{'‚úÖ' if pay_correct else '‚ùå'}")
                
                if not pay_correct:
                    analysis_passed = False
        
        return analysis_passed

    def test_roster_assignment(self):
        """Test assigning staff to roster entries"""
        if not self.roster_entries or not self.staff_data:
            print("‚ö†Ô∏è  No roster entries or staff data available for assignment test")
            return False
        
        # Get first roster entry and first staff member
        entry = self.roster_entries[0]
        staff_member = self.staff_data[0]
        
        # Update roster entry with staff assignment
        updated_entry = {
            **entry,
            "staff_id": staff_member['id'],
            "staff_name": staff_member['name']
        }
        
        success, response = self.run_test(
            "Assign Staff to Roster Entry",
            "PUT",
            f"api/roster/{entry['id']}",
            200,
            data=updated_entry
        )
        
        if success:
            print(f"   Assigned {staff_member['name']} to shift on {entry['date']}")
        
        return success

    def test_roster_templates_crud(self):
        """Test roster template CRUD operations"""
        print(f"\nüìã Testing Roster Template CRUD Operations...")
        
        # Test 1: Get all roster templates (should be empty initially)
        success, templates = self.run_test(
            "Get All Roster Templates",
            "GET",
            "api/roster-templates",
            200
        )
        if success:
            print(f"   Found {len(templates)} existing roster templates")
        
        # Test 2: Create a new roster template
        test_template = {
            "id": "",  # Will be auto-generated by backend
            "name": "Test Template",
            "description": "A test roster template",
            "is_active": True,
            "template_data": {
                "0": [  # Monday
                    {"start_time": "07:30", "end_time": "15:30", "is_sleepover": False},
                    {"start_time": "15:30", "end_time": "23:30", "is_sleepover": False}
                ],
                "1": [  # Tuesday
                    {"start_time": "07:30", "end_time": "15:30", "is_sleepover": False}
                ]
            }
        }
        
        success, created_template = self.run_test(
            "Create Roster Template",
            "POST",
            "api/roster-templates",
            200,
            data=test_template
        )
        
        template_id = None
        if success and 'id' in created_template:
            template_id = created_template['id']
            print(f"   Created template with ID: {template_id}")
        
        # Test 3: Update the template
        if template_id:
            updated_template = {
                **created_template,
                "description": "Updated test template description"
            }
            success, response = self.run_test(
                "Update Roster Template",
                "PUT",
                f"api/roster-templates/{template_id}",
                200,
                data=updated_template
            )
        
        # Test 4: Delete the template
        if template_id:
            success, response = self.run_test(
                "Delete Roster Template",
                "DELETE",
                f"api/roster-templates/{template_id}",
                200
            )
        
        return True

    def test_save_current_roster_as_template(self):
        """Test saving current roster as a template"""
        print(f"\nüíæ Testing Save Current Roster as Template...")
        
        # First ensure we have roster entries for August 2025
        month = "2025-08"
        success, response = self.run_test(
            f"Generate Roster for {month}",
            "POST",
            f"api/generate-roster/{month}",
            200
        )
        
        if not success:
            print("   ‚ö†Ô∏è  Could not generate roster for testing")
            return False
        
        # Now save the current roster as a template
        template_name = "August 2025 Template"
        success, template = self.run_test(
            "Save Current Roster as Template",
            "POST",
            f"api/roster-templates/save-current/{template_name}?month={month}",
            200
        )
        
        if success:
            print(f"   ‚úÖ Successfully saved roster as template: {template.get('name')}")
            print(f"   Template ID: {template.get('id')}")
            print(f"   Days with shifts: {list(template.get('template_data', {}).keys())}")
            return template.get('id')
        
        return None

    def test_generate_roster_from_template(self):
        """Test generating roster from a saved template"""
        print(f"\nüîÑ Testing Generate Roster from Template...")
        
        # First save a template
        template_id = self.test_save_current_roster_as_template()
        if not template_id:
            print("   ‚ö†Ô∏è  Could not create template for testing")
            return False
        
        # Clear roster for September 2025 to test generation
        target_month = "2025-09"
        success, response = self.run_test(
            f"Clear Roster for {target_month}",
            "DELETE",
            f"api/roster/month/{target_month}",
            200
        )
        
        # Generate roster from template for September 2025
        success, response = self.run_test(
            f"Generate Roster from Template for {target_month}",
            "POST",
            f"api/generate-roster-from-template/{template_id}/{target_month}",
            200
        )
        
        if success:
            entries_created = response.get('entries_created', 0)
            overlaps_detected = response.get('overlaps_detected', 0)
            print(f"   ‚úÖ Generated {entries_created} roster entries")
            if overlaps_detected > 0:
                print(f"   ‚ö†Ô∏è  {overlaps_detected} overlaps detected and skipped")
            
            # Verify the generated roster
            success, roster_entries = self.run_test(
                f"Verify Generated Roster for {target_month}",
                "GET",
                "api/roster",
                200,
                params={"month": target_month}
            )
            
            if success:
                print(f"   ‚úÖ Verified: {len(roster_entries)} entries in generated roster")
                
                # Check day-of-week placement
                day_distribution = {}
                for entry in roster_entries[:10]:  # Check first 10 entries
                    date_obj = datetime.strptime(entry['date'], "%Y-%m-%d")
                    day_of_week = date_obj.weekday()
                    day_name = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][day_of_week]
                    day_distribution[day_name] = day_distribution.get(day_name, 0) + 1
                
                print(f"   Day distribution (first 10): {day_distribution}")
                return True
        
        return False

    def test_overlap_detection(self):
        """Test overlap detection for shift additions and updates"""
        print(f"\nüö´ Testing Overlap Detection...")
        
        # Test date for overlap testing (use December which we cleared)
        test_date = "2025-12-15"
        
        # First, add a shift
        shift1 = {
            "id": "",  # Will be auto-generated
            "date": test_date,
            "shift_template_id": "test-overlap-1",
            "staff_id": None,
            "staff_name": None,
            "start_time": "09:00",
            "end_time": "17:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "manual_shift_type": None,
            "manual_hourly_rate": None,
            "manual_sleepover": None,
            "wake_hours": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, created_shift = self.run_test(
            "Add First Shift (No Overlap)",
            "POST",
            "api/roster/add-shift",
            200,
            data=shift1
        )
        
        if not success:
            print("   ‚ö†Ô∏è  Could not create first shift for overlap testing")
            return False
        
        shift1_id = created_shift.get('id')
        print(f"   ‚úÖ Created first shift: {shift1['start_time']}-{shift1['end_time']}")
        
        # Test 2: Try to add an overlapping shift (should fail)
        overlapping_shift = {
            "id": "",  # Will be auto-generated
            "date": test_date,
            "shift_template_id": "test-overlap-2",
            "staff_id": None,
            "staff_name": None,
            "start_time": "15:00",  # Overlaps with first shift
            "end_time": "20:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "manual_shift_type": None,
            "manual_hourly_rate": None,
            "manual_sleepover": None,
            "wake_hours": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, response = self.run_test(
            "Add Overlapping Shift (Should Fail)",
            "POST",
            "api/roster/add-shift",
            409,  # Expect conflict status
            data=overlapping_shift
        )
        
        if success:  # Success here means we got the expected 409 status
            print(f"   ‚úÖ Overlap correctly detected and prevented")
        else:
            print(f"   ‚ùå Overlap detection failed - overlapping shift was allowed")
        
        # Test 3: Add a non-overlapping shift (should succeed)
        non_overlapping_shift = {
            "id": "",  # Will be auto-generated
            "date": test_date,
            "shift_template_id": "test-overlap-3",
            "staff_id": None,
            "staff_name": None,
            "start_time": "18:00",  # After first shift ends
            "end_time": "22:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "manual_shift_type": None,
            "manual_hourly_rate": None,
            "manual_sleepover": None,
            "wake_hours": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, created_shift2 = self.run_test(
            "Add Non-Overlapping Shift (Should Succeed)",
            "POST",
            "api/roster/add-shift",
            200,
            data=non_overlapping_shift
        )
        
        if success:
            print(f"   ‚úÖ Non-overlapping shift added successfully")
        
        # Test 4: Try to update first shift to overlap with second (should fail)
        if shift1_id:
            updated_shift1 = {
                **created_shift,
                "end_time": "19:00"  # Would overlap with second shift
            }
            
            success, response = self.run_test(
                "Update Shift to Create Overlap (Should Fail)",
                "PUT",
                f"api/roster/{shift1_id}",
                409,  # Expect conflict status
                data=updated_shift1
            )
            
            if success:  # Success here means we got the expected 409 status
                print(f"   ‚úÖ Update overlap correctly detected and prevented")
            else:
                print(f"   ‚ùå Update overlap detection failed")
        
        return True

    def test_day_of_week_placement(self):
        """Test that template generation places shifts on correct days of week"""
        print(f"\nüìÖ Testing Day-of-Week Based Placement...")
        
        # Create a template with specific day-of-week patterns
        test_template = {
            "id": "",  # Will be auto-generated
            "name": "Day-of-Week Test Template",
            "description": "Template for testing day-of-week placement",
            "is_active": True,
            "template_data": {
                "0": [  # Monday only
                    {"start_time": "08:00", "end_time": "16:00", "is_sleepover": False}
                ],
                "2": [  # Wednesday only
                    {"start_time": "10:00", "end_time": "18:00", "is_sleepover": False}
                ],
                "4": [  # Friday only
                    {"start_time": "12:00", "end_time": "20:00", "is_sleepover": False}
                ]
            }
        }
        
        success, created_template = self.run_test(
            "Create Day-of-Week Test Template",
            "POST",
            "api/roster-templates",
            200,
            data=test_template
        )
        
        if not success or 'id' not in created_template:
            print("   ‚ö†Ô∏è  Could not create test template")
            return False
        
        template_id = created_template['id']
        
        # Clear and generate roster for October 2025
        test_month = "2025-10"
        success, response = self.run_test(
            f"Clear Roster for {test_month}",
            "DELETE",
            f"api/roster/month/{test_month}",
            200
        )
        
        success, response = self.run_test(
            f"Generate Roster from Day-of-Week Template",
            "POST",
            f"api/generate-roster-from-template/{template_id}/{test_month}",
            200
        )
        
        if not success:
            print("   ‚ö†Ô∏è  Could not generate roster from template")
            return False
        
        # Verify the placement
        success, roster_entries = self.run_test(
            f"Get Generated Roster for Verification",
            "GET",
            "api/roster",
            200,
            params={"month": test_month}
        )
        
        if success:
            # Analyze day-of-week distribution
            day_analysis = {
                'Monday': {'count': 0, 'times': []},
                'Tuesday': {'count': 0, 'times': []},
                'Wednesday': {'count': 0, 'times': []},
                'Thursday': {'count': 0, 'times': []},
                'Friday': {'count': 0, 'times': []},
                'Saturday': {'count': 0, 'times': []},
                'Sunday': {'count': 0, 'times': []}
            }
            
            day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
            
            for entry in roster_entries:
                date_obj = datetime.strptime(entry['date'], "%Y-%m-%d")
                day_of_week = date_obj.weekday()
                day_name = day_names[day_of_week]
                
                day_analysis[day_name]['count'] += 1
                day_analysis[day_name]['times'].append(f"{entry['start_time']}-{entry['end_time']}")
            
            print(f"   Day-of-week analysis:")
            for day, data in day_analysis.items():
                if data['count'] > 0:
                    print(f"      {day}: {data['count']} shifts - {set(data['times'])}")
            
            # Verify expected pattern: only Monday, Wednesday, Friday should have shifts
            expected_days = ['Monday', 'Wednesday', 'Friday']
            unexpected_days = ['Tuesday', 'Thursday', 'Saturday', 'Sunday']
            
            placement_correct = True
            for day in expected_days:
                if day_analysis[day]['count'] == 0:
                    print(f"   ‚ùå Expected shifts on {day} but found none")
                    placement_correct = False
            
            for day in unexpected_days:
                if day_analysis[day]['count'] > 0:
                    print(f"   ‚ùå Unexpected shifts found on {day}")
                    placement_correct = False
            
            if placement_correct:
                print(f"   ‚úÖ Day-of-week placement is correct")
            
            return placement_correct
        
        return False

    def test_day_templates_crud(self):
        """Test day template CRUD operations"""
        print(f"\nüåü Testing Day Template CRUD Operations...")
        
        # Test 1: Get all day templates (should be empty initially)
        success, templates = self.run_test(
            "Get All Day Templates",
            "GET",
            "api/day-templates",
            200
        )
        if success:
            print(f"   Found {len(templates)} existing day templates")
        
        # Test 2: Create a new day template
        test_day_template = {
            "id": "",  # Will be auto-generated by backend
            "name": "Test Monday Template",
            "description": "A test day template for Monday",
            "day_of_week": 0,  # Monday
            "shifts": [
                {"start_time": "07:30", "end_time": "15:30", "is_sleepover": False},
                {"start_time": "15:30", "end_time": "23:30", "is_sleepover": False},
                {"start_time": "23:30", "end_time": "07:30", "is_sleepover": True}
            ],
            "is_active": True
        }
        
        success, created_template = self.run_test(
            "Create Day Template",
            "POST",
            "api/day-templates",
            200,
            data=test_day_template
        )
        
        template_id = None
        if success and 'id' in created_template:
            template_id = created_template['id']
            print(f"   Created day template with ID: {template_id}")
            print(f"   Template has {len(created_template.get('shifts', []))} shifts")
        
        # Test 3: Get templates for specific day of week
        if template_id:
            success, day_templates = self.run_test(
                "Get Templates for Monday (day 0)",
                "GET",
                "api/day-templates/0",
                200
            )
            if success:
                print(f"   Found {len(day_templates)} templates for Monday")
                monday_template_found = any(t['id'] == template_id for t in day_templates)
                if monday_template_found:
                    print(f"   ‚úÖ Created template found in Monday templates")
                else:
                    print(f"   ‚ùå Created template not found in Monday templates")
        
        # Test 4: Delete the template
        if template_id:
            success, response = self.run_test(
                "Delete Day Template",
                "DELETE",
                f"api/day-templates/{template_id}",
                200
            )
            if success:
                print(f"   ‚úÖ Day template deleted successfully")
        
        return True

    def test_save_day_as_template(self):
        """Test saving a specific day as a day template"""
        print(f"\nüíæ Testing Save Day as Template...")
        
        # First, ensure we have roster entries for a specific date
        test_date = "2025-08-04"  # Monday, August 4th, 2025
        
        # Create some test shifts for this date
        test_shifts = [
            {
                "id": "",
                "date": test_date,
                "shift_template_id": "test-day-save-1",
                "start_time": "07:30",
                "end_time": "15:30",
                "is_sleepover": False,
                "is_public_holiday": False,
                "staff_id": None,
                "staff_name": None,
                "hours_worked": 0.0,
                "base_pay": 0.0,
                "sleepover_allowance": 0.0,
                "total_pay": 0.0
            },
            {
                "id": "",
                "date": test_date,
                "shift_template_id": "test-day-save-2",
                "start_time": "15:00",
                "end_time": "20:00",
                "is_sleepover": False,
                "is_public_holiday": False,
                "staff_id": None,
                "staff_name": None,
                "hours_worked": 0.0,
                "base_pay": 0.0,
                "sleepover_allowance": 0.0,
                "total_pay": 0.0
            },
            {
                "id": "",
                "date": test_date,
                "shift_template_id": "test-day-save-3",
                "start_time": "23:30",
                "end_time": "07:30",
                "is_sleepover": True,
                "is_public_holiday": False,
                "staff_id": None,
                "staff_name": None,
                "hours_worked": 0.0,
                "base_pay": 0.0,
                "sleepover_allowance": 0.0,
                "total_pay": 0.0
            }
        ]
        
        # Create the test shifts
        created_shifts = []
        for i, shift in enumerate(test_shifts):
            success, created_shift = self.run_test(
                f"Create Test Shift {i+1} for {test_date}",
                "POST",
                "api/roster",
                200,
                data=shift
            )
            if success:
                created_shifts.append(created_shift)
        
        if len(created_shifts) != len(test_shifts):
            print(f"   ‚ö†Ô∏è  Could not create all test shifts. Created {len(created_shifts)}/{len(test_shifts)}")
            return False
        
        print(f"   ‚úÖ Created {len(created_shifts)} test shifts for {test_date}")
        
        # Now save the day as a template
        template_name = "Monday Aug 4th Template"
        success, day_template = self.run_test(
            f"Save {test_date} as Day Template",
            "POST",
            f"api/day-templates/save-day/{template_name}?date={test_date}",
            200
        )
        
        if success:
            print(f"   ‚úÖ Successfully saved day as template: {day_template.get('name')}")
            print(f"   Template ID: {day_template.get('id')}")
            print(f"   Day of week: {day_template.get('day_of_week')} (0=Monday)")
            print(f"   Number of shifts: {len(day_template.get('shifts', []))}")
            
            # Verify the shifts were saved correctly
            saved_shifts = day_template.get('shifts', [])
            expected_times = [("07:30", "15:30"), ("15:00", "20:00"), ("23:30", "07:30")]
            
            for expected_start, expected_end in expected_times:
                found = any(s['start_time'] == expected_start and s['end_time'] == expected_end for s in saved_shifts)
                if found:
                    print(f"   ‚úÖ Shift {expected_start}-{expected_end} saved correctly")
                else:
                    print(f"   ‚ùå Shift {expected_start}-{expected_end} not found in template")
            
            return day_template.get('id')
        
        return None

    def test_apply_day_template_to_date(self):
        """Test applying a day template to a specific date"""
        print(f"\nüîÑ Testing Apply Day Template to Date...")
        
        # First create a day template
        template_id = self.test_save_day_as_template()
        if not template_id:
            print("   ‚ö†Ô∏è  Could not create day template for testing")
            return False
        
        # Apply the template to a different Monday (August 11th, 2025)
        target_date = "2025-08-11"  # Another Monday
        
        success, response = self.run_test(
            f"Apply Day Template to {target_date}",
            "POST",
            f"api/day-templates/apply-to-date/{template_id}?target_date={target_date}",
            200
        )
        
        if success:
            entries_created = response.get('entries_created', 0)
            template_name = response.get('template_name', 'Unknown')
            print(f"   ‚úÖ Applied '{template_name}' to {target_date}")
            print(f"   Created {entries_created} roster entries")
            
            # Verify the entries were created
            success, roster_entries = self.run_test(
                f"Verify Applied Template Entries",
                "GET",
                "api/roster",
                200,
                params={"month": "2025-08"}
            )
            
            if success:
                target_entries = [e for e in roster_entries if e['date'] == target_date]
                print(f"   ‚úÖ Found {len(target_entries)} entries for {target_date}")
                
                # Check that shifts have correct times but no staff assignments
                for entry in target_entries:
                    has_staff = entry.get('staff_id') is not None or entry.get('staff_name') is not None
                    if has_staff:
                        print(f"   ‚ùå Template application should not include staff assignments")
                    else:
                        print(f"   ‚úÖ Shift {entry['start_time']}-{entry['end_time']} created without staff assignment")
                
                return len(target_entries) == entries_created
        
        return False

    def test_day_template_overlap_detection(self):
        """Test overlap detection when applying day templates"""
        print(f"\nüö´ Testing Day Template Overlap Detection...")
        
        # Create a day template first
        template_id = self.test_save_day_as_template()
        if not template_id:
            print("   ‚ö†Ô∏è  Could not create day template for testing")
            return False
        
        # Create a conflicting shift on the target date first
        target_date = "2025-08-18"  # Another Monday
        conflicting_shift = {
            "id": "",
            "date": target_date,
            "shift_template_id": "conflict-test",
            "start_time": "08:00",  # Overlaps with 07:30-15:30 from template
            "end_time": "16:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "staff_id": None,
            "staff_name": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, created_shift = self.run_test(
            f"Create Conflicting Shift on {target_date}",
            "POST",
            "api/roster",
            200,
            data=conflicting_shift
        )
        
        if not success:
            print("   ‚ö†Ô∏è  Could not create conflicting shift")
            return False
        
        print(f"   ‚úÖ Created conflicting shift: {conflicting_shift['start_time']}-{conflicting_shift['end_time']}")
        
        # Now try to apply the day template (should fail due to overlap)
        success, response = self.run_test(
            f"Apply Day Template with Overlap (Should Fail)",
            "POST",
            f"api/day-templates/apply-to-date/{template_id}?target_date={target_date}",
            409  # Expect conflict status
        )
        
        if success:  # Success here means we got the expected 409 status
            print(f"   ‚úÖ Overlap correctly detected and prevented")
            return True
        else:
            print(f"   ‚ùå Overlap detection failed - template was applied despite conflicts")
            return False

    def test_day_template_filtering(self):
        """Test day-of-week filtering functionality"""
        print(f"\nüìÖ Testing Day Template Filtering...")
        
        # Create templates for different days
        test_templates = [
            {
                "name": "Monday Template",
                "description": "Template for Monday",
                "day_of_week": 0,  # Monday
                "shifts": [{"start_time": "09:00", "end_time": "17:00", "is_sleepover": False}],
                "is_active": True
            },
            {
                "name": "Wednesday Template",
                "description": "Template for Wednesday",
                "day_of_week": 2,  # Wednesday
                "shifts": [{"start_time": "10:00", "end_time": "18:00", "is_sleepover": False}],
                "is_active": True
            },
            {
                "name": "Friday Template",
                "description": "Template for Friday",
                "day_of_week": 4,  # Friday
                "shifts": [{"start_time": "11:00", "end_time": "19:00", "is_sleepover": False}],
                "is_active": True
            }
        ]
        
        created_template_ids = []
        
        # Create the templates
        for template_data in test_templates:
            template_data["id"] = ""  # Will be auto-generated
            success, created_template = self.run_test(
                f"Create {template_data['name']}",
                "POST",
                "api/day-templates",
                200,
                data=template_data
            )
            if success and 'id' in created_template:
                created_template_ids.append((created_template['id'], template_data['day_of_week']))
        
        if len(created_template_ids) != len(test_templates):
            print(f"   ‚ö†Ô∏è  Could not create all test templates")
            return False
        
        print(f"   ‚úÖ Created {len(created_template_ids)} test templates")
        
        # Test filtering by day of week
        test_cases = [
            (0, "Monday", 1),    # Should find 1 Monday template
            (2, "Wednesday", 1), # Should find 1 Wednesday template
            (4, "Friday", 1),    # Should find 1 Friday template
            (1, "Tuesday", 0),   # Should find 0 Tuesday templates
            (6, "Sunday", 0)     # Should find 0 Sunday templates
        ]
        
        filtering_correct = True
        
        for day_of_week, day_name, expected_count in test_cases:
            success, day_templates = self.run_test(
                f"Get Templates for {day_name} (day {day_of_week})",
                "GET",
                f"api/day-templates/{day_of_week}",
                200
            )
            
            if success:
                actual_count = len(day_templates)
                if actual_count == expected_count:
                    print(f"   ‚úÖ {day_name}: Found {actual_count} templates (expected {expected_count})")
                else:
                    print(f"   ‚ùå {day_name}: Found {actual_count} templates (expected {expected_count})")
                    filtering_correct = False
                
                # Verify all returned templates are for the correct day
                for template in day_templates:
                    if template.get('day_of_week') != day_of_week:
                        print(f"   ‚ùå Template '{template.get('name')}' has wrong day_of_week: {template.get('day_of_week')}")
                        filtering_correct = False
            else:
                print(f"   ‚ùå Failed to get templates for {day_name}")
                filtering_correct = False
        
        return filtering_correct

    # ========================================
    # CALENDAR EVENTS TESTS - NEW FUNCTIONALITY
    # ========================================

    def test_calendar_events_crud(self):
        """Test calendar events CRUD operations"""
        print(f"\nüìÖ Testing Calendar Events CRUD Operations...")
        
        # Test 1: Get all calendar events (should be empty initially)
        success, events = self.run_test(
            "Get All Calendar Events",
            "GET",
            "api/calendar-events",
            200
        )
        if success:
            print(f"   Found {len(events)} existing calendar events")
        
        # Test 2: Create different types of calendar events
        test_events = [
            {
                "id": "",  # Will be auto-generated
                "title": "Team Meeting",
                "description": "Weekly team standup meeting",
                "date": "2025-01-15",
                "start_time": "09:00",
                "end_time": "10:00",
                "is_all_day": False,
                "event_type": "meeting",
                "priority": "high",
                "location": "Conference Room A",
                "attendees": ["Alice", "Bob", "Charlie"],
                "reminder_minutes": 15,
                "is_completed": False,
                "is_active": True
            },
            {
                "id": "",
                "title": "Doctor Appointment",
                "description": "Annual health checkup",
                "date": "2025-01-16",
                "start_time": "14:30",
                "end_time": "15:30",
                "is_all_day": False,
                "event_type": "appointment",
                "priority": "medium",
                "location": "Medical Center",
                "attendees": [],
                "reminder_minutes": 30,
                "is_completed": False,
                "is_active": True
            },
            {
                "id": "",
                "title": "Complete Project Report",
                "description": "Finish quarterly project report",
                "date": "2025-01-17",
                "start_time": None,
                "end_time": None,
                "is_all_day": True,
                "event_type": "task",
                "priority": "urgent",
                "location": None,
                "attendees": [],
                "reminder_minutes": 60,
                "is_completed": False,
                "is_active": True
            },
            {
                "id": "",
                "title": "Birthday Party",
                "description": "Sarah's birthday celebration",
                "date": "2025-01-18",
                "start_time": "18:00",
                "end_time": "22:00",
                "is_all_day": False,
                "event_type": "personal",
                "priority": "low",
                "location": "Sarah's House",
                "attendees": ["Sarah", "Mike", "Lisa"],
                "reminder_minutes": 120,
                "is_completed": False,
                "is_active": True
            },
            {
                "id": "",
                "title": "Call Mom",
                "description": "Weekly check-in call with mom",
                "date": "2025-01-19",
                "start_time": "19:00",
                "end_time": "19:30",
                "is_all_day": False,
                "event_type": "reminder",
                "priority": "medium",
                "location": None,
                "attendees": [],
                "reminder_minutes": 10,
                "is_completed": False,
                "is_active": True
            }
        ]
        
        created_event_ids = []
        
        # Create all test events
        for i, event_data in enumerate(test_events):
            success, created_event = self.run_test(
                f"Create {event_data['event_type'].title()} Event: {event_data['title']}",
                "POST",
                "api/calendar-events",
                200,
                data=event_data
            )
            
            if success and 'id' in created_event:
                created_event_ids.append(created_event['id'])
                print(f"   ‚úÖ Created {event_data['event_type']} event with ID: {created_event['id']}")
                
                # Verify event properties
                if created_event.get('priority') == event_data['priority']:
                    print(f"      Priority: {created_event.get('priority')} ‚úÖ")
                else:
                    print(f"      Priority mismatch: got {created_event.get('priority')}, expected {event_data['priority']} ‚ùå")
                
                if created_event.get('is_all_day') == event_data['is_all_day']:
                    print(f"      All-day: {created_event.get('is_all_day')} ‚úÖ")
                else:
                    print(f"      All-day mismatch: got {created_event.get('is_all_day')}, expected {event_data['is_all_day']} ‚ùå")
        
        if len(created_event_ids) != len(test_events):
            print(f"   ‚ö†Ô∏è  Could not create all test events. Created {len(created_event_ids)}/{len(test_events)}")
            return False
        
        print(f"   ‚úÖ Successfully created {len(created_event_ids)} calendar events")
        
        # Test 3: Update an event
        if created_event_ids:
            event_to_update = created_event_ids[0]
            updated_event_data = {
                **test_events[0],
                "id": event_to_update,
                "title": "Updated Team Meeting",
                "priority": "urgent",
                "description": "Updated weekly team standup meeting"
            }
            
            success, updated_event = self.run_test(
                "Update Calendar Event",
                "PUT",
                f"api/calendar-events/{event_to_update}",
                200,
                data=updated_event_data
            )
            
            if success:
                print(f"   ‚úÖ Successfully updated event: {updated_event.get('title')}")
                print(f"      New priority: {updated_event.get('priority')}")
        
        # Test 4: Delete an event
        if len(created_event_ids) > 1:
            event_to_delete = created_event_ids[1]
            success, response = self.run_test(
                "Delete Calendar Event",
                "DELETE",
                f"api/calendar-events/{event_to_delete}",
                200
            )
            
            if success:
                print(f"   ‚úÖ Successfully deleted event")
        
        # Store created event IDs for other tests
        self.calendar_event_ids = created_event_ids
        return True

    def test_calendar_events_filtering(self):
        """Test calendar events filtering by date range and event type"""
        print(f"\nüîç Testing Calendar Events Filtering...")
        
        # Ensure we have events to test with
        if not hasattr(self, 'calendar_event_ids') or not self.calendar_event_ids:
            print("   ‚ö†Ô∏è  No calendar events available for filtering test")
            return False
        
        # Test 1: Filter by date range
        success, filtered_events = self.run_test(
            "Filter Events by Date Range (2025-01-15 to 2025-01-17)",
            "GET",
            "api/calendar-events",
            200,
            params={"start_date": "2025-01-15", "end_date": "2025-01-17"}
        )
        
        if success:
            print(f"   ‚úÖ Found {len(filtered_events)} events in date range")
            # Verify all events are within the date range
            for event in filtered_events:
                event_date = event.get('date')
                if event_date and "2025-01-15" <= event_date <= "2025-01-17":
                    print(f"      Event '{event.get('title')}' on {event_date} ‚úÖ")
                else:
                    print(f"      Event '{event.get('title')}' on {event_date} outside range ‚ùå")
        
        # Test 2: Filter by event type
        event_types_to_test = ["meeting", "appointment", "task", "personal", "reminder"]
        
        for event_type in event_types_to_test:
            success, type_filtered_events = self.run_test(
                f"Filter Events by Type: {event_type}",
                "GET",
                "api/calendar-events",
                200,
                params={"event_type": event_type}
            )
            
            if success:
                print(f"   ‚úÖ Found {len(type_filtered_events)} {event_type} events")
                # Verify all events are of the correct type
                for event in type_filtered_events:
                    if event.get('event_type') == event_type:
                        print(f"      '{event.get('title')}' is {event_type} ‚úÖ")
                    else:
                        print(f"      '{event.get('title')}' is {event.get('event_type')}, not {event_type} ‚ùå")
        
        # Test 3: Combined filtering (date range + event type)
        success, combined_filtered = self.run_test(
            "Filter Events by Date Range AND Type (meetings 2025-01-15 to 2025-01-16)",
            "GET",
            "api/calendar-events",
            200,
            params={"start_date": "2025-01-15", "end_date": "2025-01-16", "event_type": "meeting"}
        )
        
        if success:
            print(f"   ‚úÖ Found {len(combined_filtered)} meeting events in date range")
            for event in combined_filtered:
                event_date = event.get('date')
                event_type = event.get('event_type')
                date_ok = "2025-01-15" <= event_date <= "2025-01-16"
                type_ok = event_type == "meeting"
                print(f"      '{event.get('title')}': date={event_date} ({date_ok}), type={event_type} ({type_ok})")
        
        return True

    def test_get_events_for_specific_date(self):
        """Test getting events for a specific date"""
        print(f"\nüìÖ Testing Get Events for Specific Date...")
        
        # Test getting events for specific dates
        test_dates = ["2025-01-15", "2025-01-16", "2025-01-17", "2025-01-20"]  # Last one should be empty
        
        for test_date in test_dates:
            success, date_events = self.run_test(
                f"Get Events for {test_date}",
                "GET",
                f"api/calendar-events/{test_date}",
                200
            )
            
            if success:
                print(f"   ‚úÖ Found {len(date_events)} events for {test_date}")
                for event in date_events:
                    event_title = event.get('title', 'Unknown')
                    event_type = event.get('event_type', 'unknown')
                    is_all_day = event.get('is_all_day', False)
                    
                    if is_all_day:
                        print(f"      '{event_title}' ({event_type}) - All day")
                    else:
                        start_time = event.get('start_time', 'N/A')
                        end_time = event.get('end_time', 'N/A')
                        print(f"      '{event_title}' ({event_type}) - {start_time} to {end_time}")
                    
                    # Verify the event is actually for the requested date
                    if event.get('date') != test_date:
                        print(f"         ‚ùå Event date mismatch: {event.get('date')} != {test_date}")
        
        return True

    def test_task_completion(self):
        """Test marking tasks as completed"""
        print(f"\n‚úÖ Testing Task Completion...")
        
        # First, find a task event to complete
        success, all_events = self.run_test(
            "Get All Events to Find Tasks",
            "GET",
            "api/calendar-events",
            200,
            params={"event_type": "task"}
        )
        
        if not success or not all_events:
            print("   ‚ö†Ô∏è  No task events found for completion test")
            return False
        
        task_event = all_events[0]
        task_id = task_event.get('id')
        task_title = task_event.get('title', 'Unknown Task')
        
        print(f"   Testing completion of task: '{task_title}' (ID: {task_id})")
        
        # Verify task is not completed initially
        if task_event.get('is_completed'):
            print(f"   ‚ö†Ô∏è  Task is already marked as completed")
        else:
            print(f"   ‚úÖ Task is initially not completed")
        
        # Mark the task as completed
        success, response = self.run_test(
            f"Mark Task as Completed",
            "PUT",
            f"api/calendar-events/{task_id}/complete",
            200
        )
        
        if success:
            print(f"   ‚úÖ Task completion request successful")
            
            # Verify the task is now marked as completed
            success, updated_events = self.run_test(
                "Verify Task Completion",
                "GET",
                f"api/calendar-events/{task_event.get('date')}",
                200
            )
            
            if success:
                completed_task = next((e for e in updated_events if e.get('id') == task_id), None)
                if completed_task and completed_task.get('is_completed'):
                    print(f"   ‚úÖ Task is now marked as completed")
                    return True
                else:
                    print(f"   ‚ùå Task completion status not updated")
        
        return False

    def test_calendar_events_priority_levels(self):
        """Test different priority levels for calendar events"""
        print(f"\nüéØ Testing Calendar Events Priority Levels...")
        
        # Create events with different priority levels
        priority_test_events = [
            {
                "id": "",
                "title": "Low Priority Meeting",
                "description": "Optional team sync",
                "date": "2025-01-20",
                "start_time": "10:00",
                "end_time": "10:30",
                "is_all_day": False,
                "event_type": "meeting",
                "priority": "low",
                "location": "Virtual",
                "attendees": [],
                "reminder_minutes": 5,
                "is_completed": False,
                "is_active": True
            },
            {
                "id": "",
                "title": "Medium Priority Task",
                "description": "Review documentation",
                "date": "2025-01-20",
                "start_time": None,
                "end_time": None,
                "is_all_day": True,
                "event_type": "task",
                "priority": "medium",
                "location": None,
                "attendees": [],
                "reminder_minutes": 30,
                "is_completed": False,
                "is_active": True
            },
            {
                "id": "",
                "title": "High Priority Appointment",
                "description": "Important client meeting",
                "date": "2025-01-20",
                "start_time": "14:00",
                "end_time": "15:00",
                "is_all_day": False,
                "event_type": "appointment",
                "priority": "high",
                "location": "Client Office",
                "attendees": ["Client", "Manager"],
                "reminder_minutes": 60,
                "is_completed": False,
                "is_active": True
            },
            {
                "id": "",
                "title": "Urgent Reminder",
                "description": "Submit tax documents",
                "date": "2025-01-20",
                "start_time": "16:00",
                "end_time": "16:15",
                "is_all_day": False,
                "event_type": "reminder",
                "priority": "urgent",
                "location": None,
                "attendees": [],
                "reminder_minutes": 120,
                "is_completed": False,
                "is_active": True
            }
        ]
        
        created_priority_events = []
        
        for event_data in priority_test_events:
            success, created_event = self.run_test(
                f"Create {event_data['priority'].upper()} Priority Event: {event_data['title']}",
                "POST",
                "api/calendar-events",
                200,
                data=event_data
            )
            
            if success:
                created_priority_events.append(created_event)
                priority = created_event.get('priority')
                expected_priority = event_data['priority']
                
                if priority == expected_priority:
                    print(f"   ‚úÖ Priority correctly set to '{priority}'")
                else:
                    print(f"   ‚ùå Priority mismatch: got '{priority}', expected '{expected_priority}'")
        
        # Verify all priority levels are represented
        priorities_created = [e.get('priority') for e in created_priority_events]
        expected_priorities = ['low', 'medium', 'high', 'urgent']
        
        for expected_priority in expected_priorities:
            if expected_priority in priorities_created:
                print(f"   ‚úÖ {expected_priority.upper()} priority event created successfully")
            else:
                print(f"   ‚ùå {expected_priority.upper()} priority event not found")
        
        return len(created_priority_events) == len(priority_test_events)

    def test_all_day_vs_timed_events(self):
        """Test handling of all-day vs timed events"""
        print(f"\n‚è∞ Testing All-Day vs Timed Events...")
        
        # Create test events with different time configurations
        time_test_events = [
            {
                "id": "",
                "title": "All-Day Conference",
                "description": "Annual tech conference",
                "date": "2025-01-21",
                "start_time": None,
                "end_time": None,
                "is_all_day": True,
                "event_type": "meeting",
                "priority": "high",
                "location": "Convention Center",
                "attendees": ["Team"],
                "reminder_minutes": 480,  # 8 hours
                "is_completed": False,
                "is_active": True
            },
            {
                "id": "",
                "title": "Timed Meeting",
                "description": "Project kickoff meeting",
                "date": "2025-01-21",
                "start_time": "09:00",
                "end_time": "10:30",
                "is_all_day": False,
                "event_type": "meeting",
                "priority": "high",
                "location": "Conference Room B",
                "attendees": ["Project Team"],
                "reminder_minutes": 15,
                "is_completed": False,
                "is_active": True
            },
            {
                "id": "",
                "title": "All-Day Personal Event",
                "description": "Vacation day",
                "date": "2025-01-22",
                "start_time": None,
                "end_time": None,
                "is_all_day": True,
                "event_type": "personal",
                "priority": "low",
                "location": "Beach",
                "attendees": [],
                "reminder_minutes": 1440,  # 24 hours
                "is_completed": False,
                "is_active": True
            },
            {
                "id": "",
                "title": "Short Timed Task",
                "description": "Quick status update",
                "date": "2025-01-22",
                "start_time": "15:00",
                "end_time": "15:15",
                "is_all_day": False,
                "event_type": "task",
                "priority": "medium",
                "location": None,
                "attendees": [],
                "reminder_minutes": 5,
                "is_completed": False,
                "is_active": True
            }
        ]
        
        created_time_events = []
        
        for event_data in time_test_events:
            success, created_event = self.run_test(
                f"Create {'All-Day' if event_data['is_all_day'] else 'Timed'} Event: {event_data['title']}",
                "POST",
                "api/calendar-events",
                200,
                data=event_data
            )
            
            if success:
                created_time_events.append(created_event)
                
                # Verify all-day vs timed properties
                is_all_day = created_event.get('is_all_day')
                start_time = created_event.get('start_time')
                end_time = created_event.get('end_time')
                expected_all_day = event_data['is_all_day']
                
                if is_all_day == expected_all_day:
                    print(f"   ‚úÖ All-day flag correctly set to {is_all_day}")
                else:
                    print(f"   ‚ùå All-day flag mismatch: got {is_all_day}, expected {expected_all_day}")
                
                if expected_all_day:
                    # All-day events should have None for start/end times
                    if start_time is None and end_time is None:
                        print(f"   ‚úÖ All-day event has no specific times")
                    else:
                        print(f"   ‚ùå All-day event has times: {start_time}-{end_time}")
                else:
                    # Timed events should have start/end times
                    if start_time and end_time:
                        print(f"   ‚úÖ Timed event has times: {start_time}-{end_time}")
                    else:
                        print(f"   ‚ùå Timed event missing times: {start_time}-{end_time}")
        
        print(f"   ‚úÖ Created {len(created_time_events)} time-configuration test events")
        
        # Test retrieving events and verify time handling
        success, events_for_date = self.run_test(
            "Get Events for 2025-01-21 (Mixed All-Day and Timed)",
            "GET",
            "api/calendar-events/2025-01-21",
            200
        )
        
        if success:
            all_day_count = sum(1 for e in events_for_date if e.get('is_all_day'))
            timed_count = sum(1 for e in events_for_date if not e.get('is_all_day'))
            print(f"   ‚úÖ Found {all_day_count} all-day and {timed_count} timed events for 2025-01-21")
        
        return len(created_time_events) == len(time_test_events)

    def test_calendar_events_data_validation(self):
        """Test data validation and error handling for calendar events"""
        print(f"\nüîç Testing Calendar Events Data Validation...")
        
        # Test invalid event data
        invalid_test_cases = [
            {
                "name": "Missing Required Title",
                "data": {
                    "id": "",
                    "description": "Event without title",
                    "date": "2025-01-25",
                    "event_type": "meeting",
                    "priority": "medium",
                    "is_all_day": False,
                    "is_active": True
                },
                "expected_status": 422  # Validation error
            },
            {
                "name": "Invalid Date Format",
                "data": {
                    "id": "",
                    "title": "Invalid Date Event",
                    "description": "Event with invalid date",
                    "date": "2025-13-45",  # Invalid date
                    "event_type": "meeting",
                    "priority": "medium",
                    "is_all_day": False,
                    "is_active": True
                },
                "expected_status": 422  # Validation error
            },
            {
                "name": "Invalid Event Type",
                "data": {
                    "id": "",
                    "title": "Invalid Type Event",
                    "description": "Event with invalid type",
                    "date": "2025-01-25",
                    "event_type": "invalid_type",  # Not in allowed types
                    "priority": "medium",
                    "is_all_day": False,
                    "is_active": True
                },
                "expected_status": 422  # Validation error
            },
            {
                "name": "Invalid Priority Level",
                "data": {
                    "id": "",
                    "title": "Invalid Priority Event",
                    "description": "Event with invalid priority",
                    "date": "2025-01-25",
                    "event_type": "meeting",
                    "priority": "super_urgent",  # Not in allowed priorities
                    "is_all_day": False,
                    "is_active": True
                },
                "expected_status": 422  # Validation error
            }
        ]
        
        validation_tests_passed = 0
        
        for test_case in invalid_test_cases:
            success, response = self.run_test(
                f"Test Validation: {test_case['name']}",
                "POST",
                "api/calendar-events",
                test_case['expected_status'],
                data=test_case['data']
            )
            
            if success:  # Success means we got the expected error status
                validation_tests_passed += 1
                print(f"   ‚úÖ Validation correctly rejected: {test_case['name']}")
            else:
                print(f"   ‚ùå Validation failed to reject: {test_case['name']}")
        
        # Test valid edge cases
        valid_edge_cases = [
            {
                "name": "Minimal Valid Event",
                "data": {
                    "id": "",
                    "title": "Minimal Event",
                    "date": "2025-01-25",
                    "event_type": "reminder",
                    "priority": "low",
                    "is_all_day": True,
                    "is_active": True
                }
            },
            {
                "name": "Event with All Optional Fields",
                "data": {
                    "id": "",
                    "title": "Complete Event",
                    "description": "Event with all fields populated",
                    "date": "2025-01-25",
                    "start_time": "10:00",
                    "end_time": "11:00",
                    "is_all_day": False,
                    "event_type": "appointment",
                    "priority": "urgent",
                    "location": "Test Location",
                    "attendees": ["Person 1", "Person 2", "Person 3"],
                    "reminder_minutes": 30,
                    "is_completed": False,
                    "is_active": True
                }
            }
        ]
        
        for test_case in valid_edge_cases:
            success, response = self.run_test(
                f"Test Valid Edge Case: {test_case['name']}",
                "POST",
                "api/calendar-events",
                200,
                data=test_case['data']
            )
            
            if success:
                validation_tests_passed += 1
                print(f"   ‚úÖ Valid edge case accepted: {test_case['name']}")
            else:
                print(f"   ‚ùå Valid edge case rejected: {test_case['name']}")
        
        total_validation_tests = len(invalid_test_cases) + len(valid_edge_cases)
        print(f"   üìä Validation tests: {validation_tests_passed}/{total_validation_tests} passed")
        
        return validation_tests_passed == total_validation_tests

    def test_generate_roster_from_shift_templates(self):
        """Test the new roster generation endpoint using shift templates with manual overrides"""
        print(f"\nüöÄ Testing Generate Roster from Shift Templates (NEW FUNCTIONALITY)...")
        
        # Test month
        test_month = "2025-08"
        
        # Clear existing roster for the test month
        success, response = self.run_test(
            f"Clear Roster for {test_month}",
            "DELETE",
            f"api/roster/month/{test_month}",
            200
        )
        
        # Create test shift templates with manual overrides
        test_templates = {
            "templates": [
                {
                    "id": "template-monday-1",
                    "name": "Monday Morning Shift",
                    "start_time": "07:30",
                    "end_time": "15:30",
                    "is_sleepover": False,
                    "day_of_week": 0,  # Monday
                    "manual_shift_type": "weekday_evening",  # Override to evening rate
                    "manual_hourly_rate": 45.00  # Override hourly rate
                },
                {
                    "id": "template-monday-2", 
                    "name": "Monday Evening Shift",
                    "start_time": "15:00",
                    "end_time": "20:00",
                    "is_sleepover": False,
                    "day_of_week": 0,  # Monday
                    "manual_shift_type": None,  # No override - should auto-detect as evening
                    "manual_hourly_rate": None  # No override - should use standard rate
                },
                {
                    "id": "template-tuesday-1",
                    "name": "Tuesday Day Shift", 
                    "start_time": "08:00",
                    "end_time": "16:00",
                    "is_sleepover": False,
                    "day_of_week": 1,  # Tuesday
                    "manual_shift_type": None,
                    "manual_hourly_rate": 50.25  # Override hourly rate only
                },
                {
                    "id": "template-wednesday-sleepover",
                    "name": "Wednesday Sleepover",
                    "start_time": "23:30", 
                    "end_time": "07:30",
                    "is_sleepover": True,
                    "day_of_week": 2,  # Wednesday
                    "manual_shift_type": "weekday_night",
                    "manual_hourly_rate": 60.00
                }
            ]
        }
        
        # Test the new roster generation endpoint
        success, response = self.run_test(
            f"Generate Roster from Shift Templates for {test_month}",
            "POST",
            f"api/generate-roster-from-shift-templates/{test_month}",
            200,
            data=test_templates
        )
        
        if not success:
            print("   ‚ùå Failed to generate roster from shift templates")
            return False
        
        entries_created = response.get('entries_created', 0)
        overlaps_detected = response.get('overlaps_detected', 0)
        print(f"   ‚úÖ Generated {entries_created} roster entries")
        if overlaps_detected > 0:
            print(f"   ‚ö†Ô∏è  {overlaps_detected} overlaps detected and skipped")
        
        # Verify the generated roster
        success, roster_entries = self.run_test(
            f"Get Generated Roster for Verification",
            "GET", 
            "api/roster",
            200,
            params={"month": test_month}
        )
        
        if not success:
            print("   ‚ùå Failed to retrieve generated roster")
            return False
        
        print(f"   ‚úÖ Retrieved {len(roster_entries)} roster entries for verification")
        
        # Test manual overrides preservation
        manual_override_tests_passed = 0
        manual_override_tests_total = 0
        
        for entry in roster_entries[:10]:  # Check first 10 entries
            date_obj = datetime.strptime(entry['date'], "%Y-%m-%d")
            day_of_week = date_obj.weekday()
            
            # Find matching template
            matching_template = None
            for template in test_templates["templates"]:
                if (template["day_of_week"] == day_of_week and 
                    template["start_time"] == entry["start_time"] and
                    template["end_time"] == entry["end_time"]):
                    matching_template = template
                    break
            
            if matching_template:
                manual_override_tests_total += 1
                
                # Check manual_shift_type preservation
                expected_manual_shift_type = matching_template.get("manual_shift_type")
                actual_manual_shift_type = entry.get("manual_shift_type")
                
                # Check manual_hourly_rate preservation  
                expected_manual_rate = matching_template.get("manual_hourly_rate")
                actual_manual_rate = entry.get("manual_hourly_rate")
                
                shift_type_correct = expected_manual_shift_type == actual_manual_shift_type
                hourly_rate_correct = expected_manual_rate == actual_manual_rate
                
                if shift_type_correct and hourly_rate_correct:
                    manual_override_tests_passed += 1
                    print(f"   ‚úÖ Manual overrides preserved for {entry['date']} {entry['start_time']}-{entry['end_time']}")
                    if expected_manual_shift_type:
                        print(f"      Manual shift type: {actual_manual_shift_type}")
                    if expected_manual_rate:
                        print(f"      Manual hourly rate: ${actual_manual_rate}")
                else:
                    print(f"   ‚ùå Manual overrides not preserved for {entry['date']} {entry['start_time']}-{entry['end_time']}")
                    if not shift_type_correct:
                        print(f"      Shift type: expected {expected_manual_shift_type}, got {actual_manual_shift_type}")
                    if not hourly_rate_correct:
                        print(f"      Hourly rate: expected ${expected_manual_rate}, got ${actual_manual_rate}")
        
        # Test day-of-week placement
        day_placement_correct = True
        day_distribution = {}
        
        for entry in roster_entries:
            date_obj = datetime.strptime(entry['date'], "%Y-%m-%d")
            day_of_week = date_obj.weekday()
            day_name = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][day_of_week]
            day_distribution[day_name] = day_distribution.get(day_name, 0) + 1
        
        print(f"   Day distribution: {day_distribution}")
        
        # Verify only expected days have shifts (Monday, Tuesday, Wednesday based on our templates)
        expected_days = ['Monday', 'Tuesday', 'Wednesday']
        for day in expected_days:
            if day_distribution.get(day, 0) == 0:
                print(f"   ‚ùå Expected shifts on {day} but found none")
                day_placement_correct = False
            else:
                print(f"   ‚úÖ Found {day_distribution[day]} shifts on {day}")
        
        # Test pay calculation with overrides
        pay_calculation_tests_passed = 0
        pay_calculation_tests_total = 0
        
        for entry in roster_entries[:5]:  # Check first 5 entries
            pay_calculation_tests_total += 1
            
            total_pay = entry.get('total_pay', 0)
            hours_worked = entry.get('hours_worked', 0)
            manual_rate = entry.get('manual_hourly_rate')
            
            if manual_rate and not entry.get('is_sleepover', False):
                expected_pay = hours_worked * manual_rate
                if abs(total_pay - expected_pay) < 0.01:
                    pay_calculation_tests_passed += 1
                    print(f"   ‚úÖ Pay calculation with manual rate correct: {hours_worked}h √ó ${manual_rate} = ${total_pay}")
                else:
                    print(f"   ‚ùå Pay calculation with manual rate incorrect: expected ${expected_pay}, got ${total_pay}")
            else:
                # Standard pay calculation - just verify it's not zero
                if total_pay > 0:
                    pay_calculation_tests_passed += 1
                    print(f"   ‚úÖ Standard pay calculation: ${total_pay} for {hours_worked}h")
                else:
                    print(f"   ‚ùå Pay calculation failed: ${total_pay} for {hours_worked}h")
        
        print(f"\n   üìä Test Results Summary:")
        print(f"      Manual override preservation: {manual_override_tests_passed}/{manual_override_tests_total}")
        print(f"      Day-of-week placement: {'‚úÖ' if day_placement_correct else '‚ùå'}")
        print(f"      Pay calculations: {pay_calculation_tests_passed}/{pay_calculation_tests_total}")
        
        # Overall success criteria
        success_criteria = [
            entries_created > 0,
            manual_override_tests_passed == manual_override_tests_total,
            day_placement_correct,
            pay_calculation_tests_passed == pay_calculation_tests_total
        ]
        
        overall_success = all(success_criteria)
        print(f"   üéØ Overall Test Result: {'‚úÖ PASSED' if overall_success else '‚ùå FAILED'}")
        
        return overall_success

    def test_roster_template_edit_delete(self):
        """Test enhanced roster template management - edit and delete functionality"""
        print(f"\nüìù Testing Enhanced Roster Template Management (NEW FUNCTIONALITY)...")
        
        # First create a test roster template
        test_template = {
            "id": "",  # Will be auto-generated
            "name": "Test Template for Edit/Delete",
            "description": "Original description",
            "is_active": True,
            "template_data": {
                "0": [  # Monday
                    {"start_time": "09:00", "end_time": "17:00", "is_sleepover": False}
                ],
                "2": [  # Wednesday  
                    {"start_time": "10:00", "end_time": "18:00", "is_sleepover": False}
                ]
            }
        }
        
        success, created_template = self.run_test(
            "Create Test Roster Template",
            "POST",
            "api/roster-templates",
            200,
            data=test_template
        )
        
        if not success or 'id' not in created_template:
            print("   ‚ùå Failed to create test template")
            return False
        
        template_id = created_template['id']
        print(f"   ‚úÖ Created test template with ID: {template_id}")
        
        # Test 1: Update roster template (PUT endpoint)
        updated_template = {
            **created_template,
            "name": "Updated Template Name",
            "description": "Updated description with new details",
            "template_data": {
                "0": [  # Monday - modified
                    {"start_time": "08:00", "end_time": "16:00", "is_sleepover": False},
                    {"start_time": "16:00", "end_time": "22:00", "is_sleepover": False}
                ],
                "2": [  # Wednesday - kept same
                    {"start_time": "10:00", "end_time": "18:00", "is_sleepover": False}
                ],
                "4": [  # Friday - added new
                    {"start_time": "12:00", "end_time": "20:00", "is_sleepover": False}
                ]
            }
        }
        
        success, response = self.run_test(
            "Update Roster Template (PUT)",
            "PUT",
            f"api/roster-templates/{template_id}",
            200,
            data=updated_template
        )
        
        if not success:
            print("   ‚ùå Failed to update roster template")
            return False
        
        print(f"   ‚úÖ Successfully updated roster template")
        print(f"      New name: {response.get('name')}")
        print(f"      New description: {response.get('description')}")
        
        # Verify the update by retrieving the template
        success, templates = self.run_test(
            "Verify Template Update",
            "GET",
            "api/roster-templates",
            200
        )
        
        if success:
            updated_template_found = next((t for t in templates if t['id'] == template_id), None)
            if updated_template_found:
                name_updated = updated_template_found.get('name') == "Updated Template Name"
                description_updated = updated_template_found.get('description') == "Updated description with new details"
                
                if name_updated and description_updated:
                    print(f"   ‚úÖ Template update verified successfully")
                    
                    # Check template data structure
                    template_data = updated_template_found.get('template_data', {})
                    days_with_shifts = list(template_data.keys())
                    print(f"      Days with shifts: {days_with_shifts}")
                    
                    if '4' in days_with_shifts:  # Friday was added
                        print(f"   ‚úÖ New Friday shifts added successfully")
                    else:
                        print(f"   ‚ùå New Friday shifts not found")
                        
                else:
                    print(f"   ‚ùå Template update verification failed")
                    print(f"      Name updated: {name_updated}")
                    print(f"      Description updated: {description_updated}")
            else:
                print(f"   ‚ùå Updated template not found in template list")
        
        # Test 2: Delete roster template (DELETE endpoint)
        success, response = self.run_test(
            "Delete Roster Template (DELETE)",
            "DELETE",
            f"api/roster-templates/{template_id}",
            200
        )
        
        if not success:
            print("   ‚ùå Failed to delete roster template")
            return False
        
        print(f"   ‚úÖ Successfully deleted roster template")
        print(f"      Response: {response.get('message', 'Template deleted')}")
        
        # Verify the deletion by checking if template is no longer active
        success, templates_after_delete = self.run_test(
            "Verify Template Deletion",
            "GET", 
            "api/roster-templates",
            200
        )
        
        if success:
            deleted_template_found = next((t for t in templates_after_delete if t['id'] == template_id), None)
            if deleted_template_found:
                print(f"   ‚ùå Deleted template still found in active templates list")
                return False
            else:
                print(f"   ‚úÖ Template deletion verified - template no longer in active list")
        
        # Test 3: Try to update deleted template (should fail)
        success, response = self.run_test(
            "Try to Update Deleted Template (Should Fail)",
            "PUT",
            f"api/roster-templates/{template_id}",
            404,  # Expect not found
            data=updated_template
        )
        
        if success:  # Success here means we got the expected 404
            print(f"   ‚úÖ Update of deleted template correctly failed with 404")
        else:
            print(f"   ‚ùå Update of deleted template should have failed but didn't")
        
        # Test 4: Try to delete already deleted template (should fail)
        success, response = self.run_test(
            "Try to Delete Already Deleted Template (Should Fail)",
            "DELETE",
            f"api/roster-templates/{template_id}",
            404  # Expect not found
        )
        
        if success:  # Success here means we got the expected 404
            print(f"   ‚úÖ Delete of already deleted template correctly failed with 404")
        else:
            print(f"   ‚ùå Delete of already deleted template should have failed but didn't")
        
        print(f"\n   üìä Enhanced Template Management Test Results:")
        print(f"      ‚úÖ Template creation: Working")
        print(f"      ‚úÖ Template update (PUT): Working") 
        print(f"      ‚úÖ Template deletion (DELETE): Working")
        print(f"      ‚úÖ Update verification: Working")
        print(f"      ‚úÖ Deletion verification: Working")
        print(f"      ‚úÖ Error handling: Working")
        
        return True

    def test_overlap_detection_in_template_generation(self):
        """Test overlap detection and prevention in the new roster generation"""
        print(f"\nüö´ Testing Overlap Detection in Template Generation...")
        
        test_month = "2025-09"
        
        # Clear the test month
        success, response = self.run_test(
            f"Clear Roster for {test_month}",
            "DELETE",
            f"api/roster/month/{test_month}",
            200
        )
        
        # First, create some existing shifts manually
        existing_shift = {
            "id": "",
            "date": "2025-09-01",  # Monday
            "shift_template_id": "existing-shift",
            "start_time": "08:00",
            "end_time": "16:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "staff_id": None,
            "staff_name": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, created_shift = self.run_test(
            "Create Existing Shift for Overlap Test",
            "POST",
            "api/roster",
            200,
            data=existing_shift
        )
        
        if not success:
            print("   ‚ö†Ô∏è  Could not create existing shift for overlap test")
            return False
        
        print(f"   ‚úÖ Created existing shift: 2025-09-01 08:00-16:00")
        
        # Now try to generate roster with overlapping templates
        overlapping_templates = {
            "templates": [
                {
                    "id": "overlap-test-1",
                    "name": "Overlapping Monday Shift",
                    "start_time": "07:00",  # Overlaps with existing 08:00-16:00 shift
                    "end_time": "15:00",
                    "is_sleepover": False,
                    "day_of_week": 0,  # Monday
                    "manual_shift_type": None,
                    "manual_hourly_rate": None
                },
                {
                    "id": "overlap-test-2", 
                    "name": "Non-overlapping Monday Shift",
                    "start_time": "17:00",  # Does not overlap
                    "end_time": "21:00",
                    "is_sleepover": False,
                    "day_of_week": 0,  # Monday
                    "manual_shift_type": None,
                    "manual_hourly_rate": None
                }
            ]
        }
        
        success, response = self.run_test(
            f"Generate Roster with Overlapping Templates",
            "POST",
            f"api/generate-roster-from-shift-templates/{test_month}",
            200,
            data=overlapping_templates
        )
        
        if not success:
            print("   ‚ùå Failed to generate roster with overlap test")
            return False
        
        entries_created = response.get('entries_created', 0)
        overlaps_detected = response.get('overlaps_detected', 0)
        overlap_details = response.get('overlap_details', [])
        
        print(f"   ‚úÖ Roster generation completed")
        print(f"      Entries created: {entries_created}")
        print(f"      Overlaps detected: {overlaps_detected}")
        
        if overlaps_detected > 0:
            print(f"   ‚úÖ Overlap detection working - {overlaps_detected} overlaps prevented")
            for i, overlap in enumerate(overlap_details[:3]):  # Show first 3
                print(f"      Overlap {i+1}: {overlap.get('date')} {overlap.get('start_time')}-{overlap.get('end_time')}")
        else:
            print(f"   ‚ö†Ô∏è  No overlaps detected - this might indicate an issue")
        
        # Verify the final roster
        success, final_roster = self.run_test(
            f"Verify Final Roster After Overlap Test",
            "GET",
            "api/roster",
            200,
            params={"month": test_month}
        )
        
        if success:
            monday_shifts = [e for e in final_roster if e['date'] == '2025-09-01']
            print(f"   ‚úÖ Monday (2025-09-01) has {len(monday_shifts)} shifts:")
            
            for shift in monday_shifts:
                print(f"      {shift['start_time']}-{shift['end_time']} (template: {shift.get('shift_template_id', 'N/A')})")
            
            # Should have the original shift (08:00-16:00) and the non-overlapping one (17:00-21:00)
            # The overlapping one (07:00-15:00) should have been skipped
            expected_shifts = 2  # Original + non-overlapping
            if len(monday_shifts) == expected_shifts:
                print(f"   ‚úÖ Correct number of shifts after overlap prevention")
                return True
            else:
                print(f"   ‚ùå Expected {expected_shifts} shifts, found {len(monday_shifts)}")
        
        return False

    def test_2to1_shift_overlap_functionality(self):
        """Test the new 2:1 shift overlap functionality"""
        print(f"\nüîÑ Testing 2:1 Shift Overlap Functionality...")
        
        # Test date for overlap testing
        test_date = "2025-08-15"  # Friday
        
        # Clear any existing shifts for this date
        success, response = self.run_test(
            f"Clear existing shifts for {test_date}",
            "DELETE",
            f"api/roster/month/2025-08",
            200
        )
        
        # Test 1: Create a regular shift (baseline)
        regular_shift = {
            "id": "",
            "date": test_date,
            "shift_template_id": "regular-shift-test",
            "staff_id": None,
            "staff_name": None,
            "start_time": "09:00",
            "end_time": "17:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "manual_shift_type": None,
            "manual_hourly_rate": None,
            "manual_sleepover": None,
            "wake_hours": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, created_regular_shift = self.run_test(
            "Create Regular Shift (09:00-17:00)",
            "POST",
            "api/roster/add-shift",
            200,
            data=regular_shift
        )
        
        if not success:
            print("   ‚ö†Ô∏è  Could not create regular shift for 2:1 overlap testing")
            return False
        
        regular_shift_id = created_regular_shift.get('id')
        print(f"   ‚úÖ Created regular shift: {regular_shift['start_time']}-{regular_shift['end_time']}")
        
        # Test 2: Try to create another regular shift that overlaps (should fail)
        overlapping_regular_shift = {
            "id": "",
            "date": test_date,
            "shift_template_id": "overlapping-regular-test",
            "staff_id": None,
            "staff_name": None,
            "start_time": "15:00",  # Overlaps with first shift
            "end_time": "23:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "manual_shift_type": None,
            "manual_hourly_rate": None,
            "manual_sleepover": None,
            "wake_hours": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, response = self.run_test(
            "Try to Create Overlapping Regular Shift (Should Fail)",
            "POST",
            "api/roster/add-shift",
            409,  # Expect conflict status
            data=overlapping_regular_shift
        )
        
        if success:  # Success here means we got the expected 409 status
            print(f"   ‚úÖ Regular shift overlap correctly prevented")
        else:
            print(f"   ‚ùå Regular shift overlap detection failed")
            return False
        
        # Test 3: Create a "2:1 Evening Shift" that overlaps (should succeed)
        # First create a shift template with "2:1" in the name
        two_to_one_template = {
            "id": "",  # Let backend auto-generate
            "name": "2:1 Evening Shift",
            "start_time": "15:00",
            "end_time": "23:00",
            "is_sleepover": False,
            "day_of_week": 4  # Friday
        }
        
        success, created_template = self.run_test(
            "Create 2:1 Shift Template",
            "POST",
            "api/shift-templates",
            200,
            data=two_to_one_template
        )
        
        if not success or 'id' not in created_template:
            print("   ‚ùå Could not create 2:1 shift template")
            return False
        
        template_id = created_template['id']
        print(f"   ‚úÖ Created 2:1 shift template: {two_to_one_template['name']} (ID: {template_id})")
        
        two_to_one_shift = {
            "id": "",
            "date": test_date,
            "shift_template_id": template_id,  # Use the actual template ID
            "staff_id": None,
            "staff_name": None,
            "start_time": "15:00",  # Overlaps with regular shift
            "end_time": "23:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "manual_shift_type": None,
            "manual_hourly_rate": None,
            "manual_sleepover": None,
            "wake_hours": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, created_2to1_shift = self.run_test(
            "Create 2:1 Evening Shift (Should Succeed Despite Overlap)",
            "POST",
            "api/roster/add-shift",
            200,
            data=two_to_one_shift
        )
        
        if success:
            print(f"   ‚úÖ 2:1 shift overlap allowed successfully")
            two_to_one_shift_id = created_2to1_shift.get('id')
        else:
            print(f"   ‚ùå 2:1 shift overlap was incorrectly prevented")
            return False
        
        # Test 4: Create another "2:1 Support Shift" that overlaps with both (should succeed)
        # Create another 2:1 template
        another_2to1_template = {
            "id": "",  # Let backend auto-generate
            "name": "2:1 Support Shift",
            "start_time": "16:00",
            "end_time": "22:00",
            "is_sleepover": False,
            "day_of_week": 4  # Friday
        }
        
        success, created_template2 = self.run_test(
            "Create Another 2:1 Shift Template",
            "POST",
            "api/shift-templates",
            200,
            data=another_2to1_template
        )
        
        if not success or 'id' not in created_template2:
            print("   ‚ùå Could not create second 2:1 shift template")
            return False
        
        template_id2 = created_template2['id']
        print(f"   ‚úÖ Created second 2:1 shift template: {another_2to1_template['name']} (ID: {template_id2})")
        
        another_2to1_shift = {
            "id": "",
            "date": test_date,
            "shift_template_id": template_id2,  # Use the actual template ID
            "staff_id": None,
            "staff_name": None,
            "start_time": "16:00",  # Overlaps with both previous shifts
            "end_time": "22:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "manual_shift_type": None,
            "manual_hourly_rate": None,
            "manual_sleepover": None,
            "wake_hours": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, created_another_2to1 = self.run_test(
            "Create Another 2:1 Support Shift (Should Succeed Despite Multiple Overlaps)",
            "POST",
            "api/roster/add-shift",
            200,
            data=another_2to1_shift
        )
        
        if success:
            print(f"   ‚úÖ Multiple 2:1 shift overlaps allowed successfully")
        else:
            print(f"   ‚ùå Multiple 2:1 shift overlaps were incorrectly prevented")
            return False
        
        # Test 5: Test case insensitive detection - create "2:1 night shift" (lowercase)
        lowercase_2to1_template = {
            "id": "",  # Let backend auto-generate
            "name": "2:1 night shift",  # lowercase
            "start_time": "20:00",
            "end_time": "04:00",
            "is_sleepover": False,
            "day_of_week": 4  # Friday
        }
        
        success, created_template3 = self.run_test(
            "Create Lowercase 2:1 Shift Template",
            "POST",
            "api/shift-templates",
            200,
            data=lowercase_2to1_template
        )
        
        if not success or 'id' not in created_template3:
            print("   ‚ùå Could not create lowercase 2:1 shift template")
            return False
        
        template_id3 = created_template3['id']
        print(f"   ‚úÖ Created lowercase 2:1 shift template: {lowercase_2to1_template['name']} (ID: {template_id3})")
        
        lowercase_2to1_shift = {
            "id": "",
            "date": test_date,
            "shift_template_id": template_id3,  # Use the actual template ID
            "staff_id": None,
            "staff_name": None,
            "start_time": "20:00",  # Overlaps with existing shifts
            "end_time": "04:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "manual_shift_type": None,
            "manual_hourly_rate": None,
            "manual_sleepover": None,
            "wake_hours": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, created_lowercase_2to1 = self.run_test(
            "Create Lowercase 2:1 Night Shift (Case Insensitive Test)",
            "POST",
            "api/roster/add-shift",
            200,
            data=lowercase_2to1_shift
        )
        
        if success:
            print(f"   ‚úÖ Case insensitive 2:1 detection working")
        else:
            print(f"   ‚ùå Case insensitive 2:1 detection failed")
            return False
        
        # Test 6: Test updating a regular shift to overlap with 2:1 shift (should fail)
        if regular_shift_id:
            # First get the current state of the regular shift
            success, current_roster = self.run_test(
                "Get Current Roster to Check Regular Shift State",
                "GET",
                "api/roster",
                200,
                params={"month": "2025-08"}
            )
            
            if success:
                # Find the regular shift
                regular_shift_current = None
                for entry in current_roster:
                    if entry.get('id') == regular_shift_id:
                        regular_shift_current = entry
                        break
                
                if regular_shift_current:
                    print(f"   Current regular shift: {regular_shift_current['start_time']}-{regular_shift_current['end_time']}")
                    
                    # Try to extend it to overlap with 2:1 shifts
                    updated_regular_shift = {
                        **regular_shift_current,
                        "end_time": "19:00"  # Extend to overlap with 2:1 shifts
                    }
                    
                    success, response = self.run_test(
                        "Update Regular Shift to Overlap with 2:1 (Should Fail)",
                        "PUT",
                        f"api/roster/{regular_shift_id}",
                        409,  # Expect conflict status
                        data=updated_regular_shift
                    )
                    
                    if success:  # Success here means we got the expected 409 status
                        print(f"   ‚úÖ Regular shift update overlap correctly prevented")
                    else:
                        print(f"   ‚ùå Regular shift update overlap detection failed")
                        return False
                else:
                    print(f"   ‚ö†Ô∏è  Could not find regular shift for update test")
                    return False
            else:
                print(f"   ‚ö†Ô∏è  Could not get current roster for update test")
                return False
        
        # Test 7: Test updating a 2:1 shift to overlap with regular shift (should succeed)
        if two_to_one_shift_id:
            updated_2to1_shift = {
                **created_2to1_shift,
                "start_time": "14:00"  # Extends overlap with regular shift
            }
            
            success, response = self.run_test(
                "Update 2:1 Shift to Extend Overlap (Should Succeed)",
                "PUT",
                f"api/roster/{two_to_one_shift_id}",
                200,
                data=updated_2to1_shift
            )
            
            if success:
                print(f"   ‚úÖ 2:1 shift update overlap allowed successfully")
            else:
                print(f"   ‚ùå 2:1 shift update overlap was incorrectly prevented")
                return False
        
        print(f"   üéâ All 2:1 shift overlap tests passed!")
        return True

    def test_2to1_shift_template_generation(self):
        """Test 2:1 shift overlap in template generation"""
        print(f"\nüìã Testing 2:1 Shift Overlap in Template Generation...")
        
        # Test month for template generation
        test_month = "2025-09"
        
        # Clear existing roster for test month
        success, response = self.run_test(
            f"Clear Roster for {test_month}",
            "DELETE",
            f"api/roster/month/{test_month}",
            200
        )
        
        # Create shift templates with 2:1 overlaps
        shift_templates = [
            {
                "name": "Regular Morning Shift",
                "start_time": "08:00",
                "end_time": "16:00",
                "is_sleepover": False,
                "day_of_week": 0,  # Monday
                "manual_shift_type": None,
                "manual_hourly_rate": None
            },
            {
                "name": "2:1 Afternoon Shift",  # This should be allowed to overlap
                "start_time": "14:00",
                "end_time": "22:00",
                "is_sleepover": False,
                "day_of_week": 0,  # Monday - overlaps with morning shift
                "manual_shift_type": None,
                "manual_hourly_rate": None
            },
            {
                "name": "2:1 Evening Support",  # This should also be allowed to overlap
                "start_time": "18:00",
                "end_time": "02:00",
                "is_sleepover": False,
                "day_of_week": 0,  # Monday - overlaps with afternoon shift
                "manual_shift_type": None,
                "manual_hourly_rate": None
            }
        ]
        
        # Test using the enhanced roster generation endpoint
        templates_data = {
            "templates": shift_templates
        }
        
        success, response = self.run_test(
            f"Generate Roster with 2:1 Overlapping Templates for {test_month}",
            "POST",
            f"api/generate-roster-from-shift-templates/{test_month}",
            200,
            data=templates_data
        )
        
        if success:
            entries_created = response.get('entries_created', 0)
            overlaps_detected = response.get('overlaps_detected', 0)
            overlap_details = response.get('overlap_details', [])
            
            print(f"   ‚úÖ Generated {entries_created} roster entries")
            print(f"   Overlaps detected: {overlaps_detected}")
            
            if overlaps_detected > 0:
                print(f"   Overlap details (first 5):")
                for detail in overlap_details[:5]:
                    print(f"      {detail.get('date')} {detail.get('start_time')}-{detail.get('end_time')} ({detail.get('name', 'Unknown')})")
            
            # Verify the generated roster has overlapping 2:1 shifts
            success, roster_entries = self.run_test(
                f"Verify Generated Roster for {test_month}",
                "GET",
                "api/roster",
                200,
                params={"month": test_month}
            )
            
            if success:
                # Check for overlapping shifts on Mondays
                monday_shifts = []
                for entry in roster_entries:
                    date_obj = datetime.strptime(entry['date'], "%Y-%m-%d")
                    if date_obj.weekday() == 0:  # Monday
                        monday_shifts.append(entry)
                        if len(monday_shifts) >= 9:  # Check first 3 Mondays (3 shifts each)
                            break
                
                print(f"   Found {len(monday_shifts)} Monday shifts for overlap analysis")
                
                # Group by date and check for overlaps
                monday_dates = {}
                for shift in monday_shifts:
                    date = shift['date']
                    if date not in monday_dates:
                        monday_dates[date] = []
                    monday_dates[date].append(shift)
                
                overlap_found = False
                for date, shifts in monday_dates.items():
                    if len(shifts) > 1:
                        print(f"   Date {date} has {len(shifts)} shifts:")
                        for shift in shifts:
                            print(f"      {shift['start_time']}-{shift['end_time']}")
                        overlap_found = True
                        break
                
                if overlap_found:
                    print(f"   ‚úÖ 2:1 shift overlaps successfully generated")
                else:
                    print(f"   ‚ö†Ô∏è  No overlapping shifts found (may be expected if overlaps were prevented)")
                
                return True
        
        return False

    def test_2to1_day_template_overlap(self):
        """Test 2:1 shift overlap in day template application"""
        print(f"\nüåü Testing 2:1 Shift Overlap in Day Template Application...")
        
        # Create a day template with 2:1 shifts
        day_template_with_2to1 = {
            "id": "",
            "name": "2:1 Monday Template",
            "description": "Monday template with 2:1 overlapping shifts",
            "day_of_week": 0,  # Monday
            "shifts": [
                {"start_time": "09:00", "end_time": "17:00", "is_sleepover": False},  # Regular shift
                {"start_time": "15:00", "end_time": "23:00", "is_sleepover": False},  # 2:1 overlap
                {"start_time": "19:00", "end_time": "03:00", "is_sleepover": False}   # Another 2:1 overlap
            ],
            "is_active": True
        }
        
        success, created_template = self.run_test(
            "Create Day Template with 2:1 Overlaps",
            "POST",
            "api/day-templates",
            200,
            data=day_template_with_2to1
        )
        
        if not success or 'id' not in created_template:
            print("   ‚ö†Ô∏è  Could not create day template with 2:1 overlaps")
            return False
        
        template_id = created_template['id']
        print(f"   ‚úÖ Created day template with ID: {template_id}")
        
        # Apply the template to a specific Monday
        target_date = "2025-09-01"  # Monday, September 1st, 2025
        
        success, response = self.run_test(
            f"Apply 2:1 Day Template to {target_date}",
            "POST",
            f"api/day-templates/apply-to-date/{template_id}?target_date={target_date}",
            200
        )
        
        if success:
            entries_created = response.get('entries_created', 0)
            template_name = response.get('template_name', 'Unknown')
            print(f"   ‚úÖ Applied '{template_name}' to {target_date}")
            print(f"   Created {entries_created} roster entries")
            
            # Verify the overlapping entries were created
            success, roster_entries = self.run_test(
                f"Verify Applied 2:1 Template Entries",
                "GET",
                "api/roster",
                200,
                params={"month": "2025-09"}
            )
            
            if success:
                target_entries = [e for e in roster_entries if e['date'] == target_date]
                print(f"   ‚úÖ Found {len(target_entries)} entries for {target_date}")
                
                if len(target_entries) >= 3:  # Should have all 3 overlapping shifts
                    print(f"   ‚úÖ All overlapping 2:1 shifts created successfully")
                    for entry in target_entries:
                        print(f"      Shift: {entry['start_time']}-{entry['end_time']}")
                    return True
                else:
                    print(f"   ‚ùå Expected 3 overlapping shifts, got {len(target_entries)}")
        
        return False

    def test_allow_overlap_functionality(self):
        """Test the new Allow Overlap functionality for adding 2:1 shifts"""
        print(f"\nüîÑ Testing Allow Overlap Functionality...")
        
        # Test date for overlap testing
        test_date = "2025-08-20"
        
        # Clear any existing shifts for this date
        success, response = self.run_test(
            f"Clear existing shifts for {test_date}",
            "DELETE",
            f"api/roster/month/2025-08",
            200
        )
        
        # Test 1: Add a regular shift first
        regular_shift = {
            "id": "",
            "date": test_date,
            "shift_template_id": "regular-shift-1",
            "staff_id": None,
            "staff_name": None,
            "start_time": "09:00",
            "end_time": "17:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "manual_shift_type": None,
            "manual_hourly_rate": None,
            "manual_sleepover": None,
            "wake_hours": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0,
            "allow_overlap": False  # Default behavior
        }
        
        success, created_regular = self.run_test(
            "Add Regular Shift (09:00-17:00)",
            "POST",
            "api/roster/add-shift",
            200,
            data=regular_shift
        )
        
        if not success:
            print("   ‚ö†Ô∏è  Could not create regular shift for testing")
            return False
        
        print(f"   ‚úÖ Created regular shift: {regular_shift['start_time']}-{regular_shift['end_time']}")
        
        # Test 2: Try to add overlapping shift with allow_overlap=False (should fail with enhanced error)
        overlapping_shift_no_allow = {
            "id": "",
            "date": test_date,
            "shift_template_id": "overlapping-shift-1",
            "staff_id": None,
            "staff_name": None,
            "start_time": "15:00",  # Overlaps with first shift
            "end_time": "23:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "manual_shift_type": None,
            "manual_hourly_rate": None,
            "manual_sleepover": None,
            "wake_hours": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0,
            "allow_overlap": False  # Explicitly set to False
        }
        
        success, response = self.run_test(
            "Add Overlapping Shift with allow_overlap=False (Should Fail)",
            "POST",
            "api/roster/add-shift",
            409,  # Expect conflict
            data=overlapping_shift_no_allow
        )
        
        if success:  # Success means we got expected 409
            print(f"   ‚úÖ Overlap correctly prevented when allow_overlap=False")
            # Check for enhanced error message
            print(f"   Expected enhanced error message about 'Allow Overlap' option")
        else:
            print(f"   ‚ùå Overlap detection failed when allow_overlap=False")
            return False
        
        # Test 3: Add overlapping shift with allow_overlap=True (should succeed)
        overlapping_shift_allow = {
            "id": "",
            "date": test_date,
            "shift_template_id": "overlapping-shift-2",
            "staff_id": None,
            "staff_name": None,
            "start_time": "15:00",  # Overlaps with first shift
            "end_time": "23:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "manual_shift_type": None,
            "manual_hourly_rate": None,
            "manual_sleepover": None,
            "wake_hours": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0,
            "allow_overlap": True  # Allow overlap
        }
        
        success, created_overlap = self.run_test(
            "Add Overlapping Shift with allow_overlap=True (Should Succeed)",
            "POST",
            "api/roster/add-shift",
            200,
            data=overlapping_shift_allow
        )
        
        if success:
            print(f"   ‚úÖ Overlap allowed successfully when allow_overlap=True")
            print(f"   Overlapping shift: {overlapping_shift_allow['start_time']}-{overlapping_shift_allow['end_time']}")
        else:
            print(f"   ‚ùå Overlap was incorrectly prevented even with allow_overlap=True")
            return False
        
        # Test 4: Add another overlapping shift with allow_overlap=True (should succeed)
        second_overlap_shift = {
            "id": "",
            "date": test_date,
            "shift_template_id": "overlapping-shift-3",
            "staff_id": None,
            "staff_name": None,
            "start_time": "16:00",  # Overlaps with both existing shifts
            "end_time": "22:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "manual_shift_type": None,
            "manual_hourly_rate": None,
            "manual_sleepover": None,
            "wake_hours": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0,
            "allow_overlap": True  # Allow overlap
        }
        
        success, created_second_overlap = self.run_test(
            "Add Second Overlapping Shift with allow_overlap=True (Should Succeed)",
            "POST",
            "api/roster/add-shift",
            200,
            data=second_overlap_shift
        )
        
        if success:
            print(f"   ‚úÖ Second overlap allowed successfully when allow_overlap=True")
            print(f"   Second overlapping shift: {second_overlap_shift['start_time']}-{second_overlap_shift['end_time']}")
        else:
            print(f"   ‚ùå Second overlap was incorrectly prevented even with allow_overlap=True")
            return False
        
        # Test 5: Test default behavior (allow_overlap not specified, should default to False)
        default_overlap_shift = {
            "id": "",
            "date": test_date,
            "shift_template_id": "default-shift-1",
            "staff_id": None,
            "staff_name": None,
            "start_time": "14:00",  # Overlaps with existing shifts
            "end_time": "18:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "manual_shift_type": None,
            "manual_hourly_rate": None,
            "manual_sleepover": None,
            "wake_hours": None,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
            # allow_overlap not specified - should default to False
        }
        
        success, response = self.run_test(
            "Add Shift without allow_overlap field (Should Fail - Default False)",
            "POST",
            "api/roster/add-shift",
            409,  # Expect conflict
            data=default_overlap_shift
        )
        
        if success:  # Success means we got expected 409
            print(f"   ‚úÖ Default behavior works correctly (allow_overlap defaults to False)")
        else:
            print(f"   ‚ùå Default behavior failed - overlap was allowed when it shouldn't be")
            return False
        
        # Test 6: Verify pay calculations work correctly for overlapping shifts
        success, final_roster = self.run_test(
            f"Verify Pay Calculations for Overlapping Shifts",
            "GET",
            "api/roster",
            200,
            params={"month": "2025-08"}
        )
        
        if success:
            date_shifts = [entry for entry in final_roster if entry['date'] == test_date]
            print(f"   ‚úÖ Pay calculation verification: {len(date_shifts)} shifts for {test_date}")
            
            total_pay_sum = 0
            for shift in date_shifts:
                hours_worked = shift.get('hours_worked', 0)
                total_pay = shift.get('total_pay', 0)
                base_pay = shift.get('base_pay', 0)
                
                print(f"      {shift['start_time']}-{shift['end_time']}: {hours_worked}h, Base: ${base_pay}, Total: ${total_pay}")
                total_pay_sum += total_pay
                
                # Verify pay calculation is reasonable
                if hours_worked > 0 and total_pay > 0:
                    hourly_rate = total_pay / hours_worked
                    if 40 <= hourly_rate <= 90:  # Reasonable range for SCHADS rates
                        print(f"         ‚úÖ Pay calculation reasonable: ${hourly_rate:.2f}/hr")
                    else:
                        print(f"         ‚ö†Ô∏è  Pay calculation may be incorrect: ${hourly_rate:.2f}/hr")
            
            print(f"   Total pay for all overlapping shifts: ${total_pay_sum}")
        
        # Test 7: Test RosterEntry model accepts allow_overlap field
        print(f"\n   üîç Testing RosterEntry model accepts allow_overlap field...")
        
        # Verify the created shifts have the allow_overlap field stored
        if success and date_shifts:
            for shift in date_shifts:
                allow_overlap_value = shift.get('allow_overlap')
                print(f"      Shift {shift['start_time']}-{shift['end_time']}: allow_overlap = {allow_overlap_value}")
                
                # The field should be present and have the expected value
                if allow_overlap_value is not None:
                    print(f"         ‚úÖ allow_overlap field properly stored")
                else:
                    print(f"         ‚ö†Ô∏è  allow_overlap field not found in stored data")
        
        print(f"   üéâ Allow Overlap Functionality Test Complete!")
        print(f"   üìã Summary:")
        print(f"      ‚úÖ allow_overlap=False prevents overlaps (with enhanced error message)")
        print(f"      ‚úÖ allow_overlap=True allows overlaps")
        print(f"      ‚úÖ Default behavior (no field) prevents overlaps")
        print(f"      ‚úÖ Multiple overlapping shifts can be added with allow_overlap=True")
        print(f"      ‚úÖ Pay calculations work correctly for overlapping shifts")
        print(f"      ‚úÖ RosterEntry model accepts and stores allow_overlap field")
        
        return True

    def test_pay_calculation_with_staff_assignments(self):
        """Test pay calculations with staff assignments for pay summary display"""
        print(f"\nüí∞ Testing Pay Calculations with Staff Assignments...")
        
        if not self.staff_data:
            print("   ‚ö†Ô∏è  No staff data available, getting staff first...")
            self.test_get_staff()
        
        if not self.staff_data:
            print("   ‚ùå Cannot test pay calculations without staff data")
            return False
        
        # Test creating roster entries with staff assignments and verify pay calculations
        test_shifts = [
            {
                "date": "2025-01-20",  # Monday
                "start_time": "07:30",
                "end_time": "15:30",
                "staff_name": "Angela",
                "expected_hours": 8.0,
                "expected_rate": 42.00,  # Weekday day rate
                "expected_pay": 336.00
            },
            {
                "date": "2025-01-20",  # Monday
                "start_time": "15:00", 
                "end_time": "20:00",
                "staff_name": "Caroline",
                "expected_hours": 5.0,
                "expected_rate": 44.50,  # Evening rate (extends past 8pm)
                "expected_pay": 222.50
            },
            {
                "date": "2025-01-25",  # Saturday
                "start_time": "09:00",
                "end_time": "17:00", 
                "staff_name": "Rose",
                "expected_hours": 8.0,
                "expected_rate": 57.50,  # Saturday rate
                "expected_pay": 460.00
            }
        ]
        
        created_entries = []
        pay_tests_passed = 0
        
        for i, shift in enumerate(test_shifts):
            # Find staff member
            staff_member = next((s for s in self.staff_data if s['name'] == shift['staff_name']), None)
            if not staff_member:
                print(f"   ‚ö†Ô∏è  Staff member {shift['staff_name']} not found")
                continue
            
            # Create roster entry with staff assignment
            roster_entry = {
                "id": "",  # Will be auto-generated
                "date": shift["date"],
                "shift_template_id": f"test-pay-{i}",
                "staff_id": staff_member['id'],
                "staff_name": staff_member['name'],
                "start_time": shift["start_time"],
                "end_time": shift["end_time"],
                "is_sleepover": False,
                "is_public_holiday": False,
                "hours_worked": 0.0,
                "base_pay": 0.0,
                "sleepover_allowance": 0.0,
                "total_pay": 0.0
            }
            
            success, response = self.run_test(
                f"Create Shift for {shift['staff_name']} on {shift['date']}",
                "POST",
                "api/roster",
                200,
                data=roster_entry
            )
            
            if success:
                created_entries.append(response)
                
                # Verify pay calculation
                hours_worked = response.get('hours_worked', 0)
                total_pay = response.get('total_pay', 0)
                staff_id = response.get('staff_id')
                staff_name = response.get('staff_name')
                
                print(f"   Staff: {staff_name} (ID: {staff_id})")
                print(f"   Hours: {hours_worked} (expected: {shift['expected_hours']})")
                print(f"   Pay: ${total_pay} (expected: ${shift['expected_pay']})")
                
                hours_correct = abs(hours_worked - shift['expected_hours']) < 0.1
                pay_correct = abs(total_pay - shift['expected_pay']) < 0.01
                
                if hours_correct and pay_correct:
                    print(f"   ‚úÖ Pay calculation correct for {staff_name}")
                    pay_tests_passed += 1
                else:
                    print(f"   ‚ùå Pay calculation incorrect for {staff_name}")
                    if not hours_correct:
                        print(f"      Hours mismatch: got {hours_worked}, expected {shift['expected_hours']}")
                    if not pay_correct:
                        print(f"      Pay mismatch: got ${total_pay}, expected ${shift['expected_pay']}")
        
        print(f"\n   üìä Pay calculation tests with staff: {pay_tests_passed}/{len(test_shifts)} passed")
        self.roster_entries.extend(created_entries)
        return pay_tests_passed == len(test_shifts)

    def test_staff_pay_summary_data(self):
        """Test that staff endpoints return proper data for pay summary calculations"""
        print(f"\nüë• Testing Staff Data for Pay Summary Display...")
        
        # Get staff data
        success, staff_list = self.run_test(
            "Get Staff for Pay Summary",
            "GET", 
            "api/staff",
            200
        )
        
        if not success:
            return False
        
        print(f"   Found {len(staff_list)} staff members")
        
        # Verify staff data structure for pay summary
        required_fields = ['id', 'name', 'active']
        staff_data_valid = True
        
        for staff in staff_list[:3]:  # Check first 3 staff members
            print(f"   Staff: {staff.get('name', 'Unknown')}")
            for field in required_fields:
                if field in staff:
                    print(f"      {field}: {staff[field]} ‚úÖ")
                else:
                    print(f"      {field}: Missing ‚ùå")
                    staff_data_valid = False
        
        # Test getting roster data for pay summary calculation
        current_month = datetime.now().strftime("%Y-%m")
        success, roster_data = self.run_test(
            f"Get Roster Data for Pay Summary ({current_month})",
            "GET",
            "api/roster",
            200,
            params={"month": current_month}
        )
        
        if success:
            print(f"   Found {len(roster_data)} roster entries for pay summary")
            
            # Analyze roster entries for pay summary data
            staff_pay_summary = {}
            
            for entry in roster_data:
                staff_id = entry.get('staff_id')
                staff_name = entry.get('staff_name')
                total_pay = entry.get('total_pay', 0)
                hours_worked = entry.get('hours_worked', 0)
                
                if staff_id and staff_name:
                    if staff_id not in staff_pay_summary:
                        staff_pay_summary[staff_id] = {
                            'name': staff_name,
                            'total_hours': 0,
                            'total_pay': 0,
                            'shift_count': 0
                        }
                    
                    staff_pay_summary[staff_id]['total_hours'] += hours_worked
                    staff_pay_summary[staff_id]['total_pay'] += total_pay
                    staff_pay_summary[staff_id]['shift_count'] += 1
            
            print(f"   Pay summary data available for {len(staff_pay_summary)} staff members:")
            for staff_id, summary in list(staff_pay_summary.items())[:5]:  # Show first 5
                print(f"      {summary['name']}: {summary['shift_count']} shifts, "
                      f"{summary['total_hours']}h, ${summary['total_pay']:.2f}")
        
        return staff_data_valid

    def test_roster_data_integrity(self):
        """Test roster entries have proper staff assignments and pay calculations"""
        print(f"\nüìã Testing Roster Data Integrity...")
        
        # Get current month roster
        current_month = datetime.now().strftime("%Y-%m")
        success, roster_entries = self.run_test(
            f"Get Roster Entries for Integrity Check ({current_month})",
            "GET",
            "api/roster", 
            200,
            params={"month": current_month}
        )
        
        if not success:
            return False
        
        print(f"   Analyzing {len(roster_entries)} roster entries...")
        
        # Analyze data integrity
        entries_with_staff = 0
        entries_with_pay = 0
        entries_with_hours = 0
        pay_calculation_errors = 0
        
        for entry in roster_entries[:10]:  # Check first 10 entries
            date = entry.get('date', 'Unknown')
            start_time = entry.get('start_time', 'Unknown')
            end_time = entry.get('end_time', 'Unknown')
            staff_name = entry.get('staff_name')
            staff_id = entry.get('staff_id')
            hours_worked = entry.get('hours_worked', 0)
            total_pay = entry.get('total_pay', 0)
            base_pay = entry.get('base_pay', 0)
            
            print(f"   Entry: {date} {start_time}-{end_time}")
            
            # Check staff assignment
            if staff_id and staff_name:
                entries_with_staff += 1
                print(f"      Staff: {staff_name} (ID: {staff_id}) ‚úÖ")
            else:
                print(f"      Staff: Unassigned ‚ö†Ô∏è")
            
            # Check hours calculation
            if hours_worked > 0:
                entries_with_hours += 1
                print(f"      Hours: {hours_worked} ‚úÖ")
            else:
                print(f"      Hours: {hours_worked} ‚ö†Ô∏è")
            
            # Check pay calculation
            if total_pay > 0:
                entries_with_pay += 1
                print(f"      Pay: ${total_pay} (base: ${base_pay}) ‚úÖ")
                
                # Basic pay calculation validation
                if hours_worked > 0 and base_pay > 0:
                    calculated_rate = base_pay / hours_worked
                    if calculated_rate < 30 or calculated_rate > 100:  # Reasonable rate range
                        pay_calculation_errors += 1
                        print(f"      ‚ö†Ô∏è  Unusual hourly rate: ${calculated_rate:.2f}/hr")
            else:
                print(f"      Pay: ${total_pay} ‚ö†Ô∏è")
        
        print(f"\n   üìä Roster Data Integrity Summary:")
        print(f"      Entries with staff assignments: {entries_with_staff}/10")
        print(f"      Entries with hours calculated: {entries_with_hours}/10") 
        print(f"      Entries with pay calculated: {entries_with_pay}/10")
        print(f"      Pay calculation errors: {pay_calculation_errors}/10")
        
        # Consider test passed if most entries have proper data
        integrity_score = (entries_with_hours + entries_with_pay) / 20  # Out of 20 total checks
        return integrity_score >= 0.8

    def test_critical_api_endpoints(self):
        """Test all critical API endpoints are responding correctly"""
        print(f"\nüîó Testing Critical API Endpoints...")
        
        critical_endpoints = [
            ("Health Check", "GET", "api/health", 200),
            ("Get Staff", "GET", "api/staff", 200),
            ("Get Shift Templates", "GET", "api/shift-templates", 200),
            ("Get Settings", "GET", "api/settings", 200),
            ("Get Roster (Current Month)", "GET", "api/roster", 200, {"month": datetime.now().strftime("%Y-%m")}),
        ]
        
        endpoints_passed = 0
        
        for name, method, endpoint, expected_status, *params in critical_endpoints:
            query_params = params[0] if params else None
            success, response = self.run_test(
                name,
                method,
                endpoint,
                expected_status,
                params=query_params
            )
            
            if success:
                endpoints_passed += 1
                
                # Additional validation for specific endpoints
                if endpoint == "api/staff" and isinstance(response, list):
                    print(f"      Staff count: {len(response)}")
                elif endpoint == "api/shift-templates" and isinstance(response, list):
                    print(f"      Template count: {len(response)}")
                elif endpoint == "api/roster" and isinstance(response, list):
                    print(f"      Roster entries: {len(response)}")
        
        print(f"\n   üìä Critical API Endpoints: {endpoints_passed}/{len(critical_endpoints)} responding correctly")
        return endpoints_passed == len(critical_endpoints)

    def run_focused_backend_tests(self):
        """Run focused backend tests based on review request"""
        print("=" * 80)
        print("üéØ SHIFT ROSTER BACKEND TESTING - FOCUSED ON REVIEW REQUEST")
        print("=" * 80)
        print(f"Testing backend at: {self.base_url}")
        print(f"Test started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        test_results = {}
        
        # 1. Authentication System Test
        print("\n" + "="*50)
        print("1. AUTHENTICATION SYSTEM TEST")
        print("="*50)
        test_results['authentication'] = self.test_authentication_system()
        
        # 2. API Health Check
        print("\n" + "="*50) 
        print("2. CRITICAL API ENDPOINTS TEST")
        print("="*50)
        test_results['api_health'] = self.test_critical_api_endpoints()
        
        # 3. Staff Management Test
        print("\n" + "="*50)
        print("3. STAFF MANAGEMENT TEST")
        print("="*50)
        test_results['staff_management'] = self.test_get_staff()
        
        # 4. Pay Calculation Test
        print("\n" + "="*50)
        print("4. PAY CALCULATION TEST")
        print("="*50)
        test_results['pay_calculation'] = self.test_pay_calculation_with_staff_assignments()
        
        # 5. Staff Pay Summary Data Test
        print("\n" + "="*50)
        print("5. STAFF PAY SUMMARY DATA TEST")
        print("="*50)
        test_results['pay_summary_data'] = self.test_staff_pay_summary_data()
        
        # 6. Roster Data Integrity Test
        print("\n" + "="*50)
        print("6. ROSTER DATA INTEGRITY TEST")
        print("="*50)
        test_results['roster_integrity'] = self.test_roster_data_integrity()
        
        # Summary
        print("\n" + "="*80)
        print("üéØ FOCUSED BACKEND TEST RESULTS SUMMARY")
        print("="*80)
        
        passed_tests = sum(1 for result in test_results.values() if result)
        total_tests = len(test_results)
        
        for test_name, result in test_results.items():
            status = "‚úÖ PASSED" if result else "‚ùå FAILED"
            print(f"{test_name.replace('_', ' ').title()}: {status}")
        
        print(f"\nOverall Results: {passed_tests}/{total_tests} tests passed")
        print(f"Total API calls made: {self.tests_run}")
        print(f"Successful API calls: {self.tests_passed}")
        print(f"API Success Rate: {(self.tests_passed/self.tests_run)*100:.1f}%")
        
        if passed_tests == total_tests:
            print("\nüéâ ALL FOCUSED BACKEND TESTS PASSED!")
            print("‚úÖ Authentication system working with Admin/0000")
            print("‚úÖ Pay calculations working properly for staff")
            print("‚úÖ Staff management endpoints returning proper data")
            print("‚úÖ Roster data has proper staff assignments and pay calculations")
            print("‚úÖ All critical API endpoints responding correctly")
        else:
            print(f"\n‚ö†Ô∏è  {total_tests - passed_tests} test(s) failed - see details above")
        
        return passed_tests == total_tests

    def test_staff_profile_updates_review(self):
        """Test updating staff profile information - REVIEW REQUEST SPECIFIC"""
        print(f"\nüë§ Testing Staff Profile Updates (Review Request)...")
        
        if not self.staff_data:
            print("   ‚ö†Ô∏è  No staff data available for profile update test")
            return False
        
        # Get first staff member for testing
        staff_member = self.staff_data[0]
        staff_id = staff_member['id']
        original_name = staff_member['name']
        
        print(f"   Testing profile update for: {original_name} (ID: {staff_id})")
        
        # Update staff profile with new information
        updated_profile = {
            **staff_member,
            "name": f"{original_name} (Updated)",
            "active": True
        }
        
        success, response = self.run_test(
            "Update Staff Profile",
            "PUT",
            f"api/staff/{staff_id}",
            200,
            data=updated_profile
        )
        
        if success:
            print(f"   ‚úÖ Staff profile updated successfully")
            print(f"   Updated name: {response.get('name')}")
            
            # Verify the update by fetching staff again
            success, updated_staff_list = self.run_test(
                "Verify Staff Profile Update",
                "GET",
                "api/staff",
                200
            )
            
            if success:
                updated_staff = next((s for s in updated_staff_list if s['id'] == staff_id), None)
                if updated_staff and updated_staff['name'] == updated_profile['name']:
                    print(f"   ‚úÖ Profile update verified in staff list")
                    return True
                else:
                    print(f"   ‚ùå Profile update not reflected in staff list")
        
        return False

    def test_shift_assignment_updates_review(self):
        """Test updating roster entries to assign staff to unassigned shifts - REVIEW REQUEST SPECIFIC"""
        print(f"\nüìã Testing Shift Assignment Updates (Review Request)...")
        
        # First get current roster data
        current_month = datetime.now().strftime("%Y-%m")
        success, roster_entries = self.run_test(
            f"Get Current Roster for Assignment Test",
            "GET",
            "api/roster",
            200,
            params={"month": current_month}
        )
        
        if not success or not roster_entries:
            print("   ‚ö†Ô∏è  No roster entries available for assignment test")
            return False
        
        if not self.staff_data:
            print("   ‚ö†Ô∏è  No staff data available for assignment test")
            return False
        
        # Find an unassigned shift
        unassigned_shift = None
        for entry in roster_entries:
            if not entry.get('staff_id') and not entry.get('staff_name'):
                unassigned_shift = entry
                break
        
        if not unassigned_shift:
            print("   ‚ö†Ô∏è  No unassigned shifts found for testing")
            return False
        
        # Get a staff member to assign
        staff_member = self.staff_data[0]
        
        print(f"   Assigning {staff_member['name']} to shift on {unassigned_shift['date']} {unassigned_shift['start_time']}-{unassigned_shift['end_time']}")
        
        # Update the shift with staff assignment
        updated_shift = {
            **unassigned_shift,
            "staff_id": staff_member['id'],
            "staff_name": staff_member['name']
        }
        
        success, response = self.run_test(
            "Assign Staff to Unassigned Shift (PUT /api/roster/{id})",
            "PUT",
            f"api/roster/{unassigned_shift['id']}",
            200,
            data=updated_shift
        )
        
        if success:
            print(f"   ‚úÖ Staff assignment successful")
            print(f"   Assigned staff: {response.get('staff_name')}")
            print(f"   Staff ID: {response.get('staff_id')}")
            
            # Verify pay calculation is still correct
            if response.get('total_pay') > 0:
                print(f"   ‚úÖ Pay calculation maintained: ${response.get('total_pay')}")
            else:
                print(f"   ‚ö†Ô∏è  Pay calculation may need review: ${response.get('total_pay')}")
            
            return True
        
        return False

    def analyze_pay_summary_data_review(self):
        """Examine roster data for pay summary analysis - REVIEW REQUEST SPECIFIC"""
        print(f"\nüí∞ Analyzing Pay Summary Data (Review Request)...")
        
        # Get current roster data
        current_month = datetime.now().strftime("%Y-%m")
        success, roster_entries = self.run_test(
            f"Get Roster Data for Pay Summary Analysis",
            "GET",
            "api/roster",
            200,
            params={"month": current_month}
        )
        
        if not success or not roster_entries:
            print("   ‚ö†Ô∏è  No roster entries available for analysis")
            return False
        
        print(f"   Analyzing {len(roster_entries)} roster entries...")
        
        # Analyze shift assignments
        assigned_shifts = []
        unassigned_shifts = []
        inactive_staff_shifts = []
        
        for entry in roster_entries:
            staff_name = entry.get('staff_name')
            staff_id = entry.get('staff_id')
            
            if staff_name or staff_id:
                assigned_shifts.append(entry)
                
                # Check if assigned to inactive staff
                if staff_id:
                    staff_member = next((s for s in self.staff_data if s['id'] == staff_id), None)
                    if staff_member and not staff_member.get('active', True):
                        inactive_staff_shifts.append(entry)
            else:
                unassigned_shifts.append(entry)
        
        print(f"\n   üìä Shift Assignment Analysis:")
        print(f"   Total shifts: {len(roster_entries)}")
        print(f"   Assigned shifts: {len(assigned_shifts)} ({len(assigned_shifts)/len(roster_entries)*100:.1f}%)")
        print(f"   Unassigned shifts: {len(unassigned_shifts)} ({len(unassigned_shifts)/len(roster_entries)*100:.1f}%)")
        print(f"   Shifts assigned to inactive staff: {len(inactive_staff_shifts)}")
        
        # Analyze pay calculation data
        shifts_with_pay = [e for e in roster_entries if e.get('total_pay', 0) > 0]
        shifts_without_pay = [e for e in roster_entries if e.get('total_pay', 0) == 0]
        
        print(f"\n   üíµ Pay Calculation Analysis:")
        print(f"   Shifts with pay calculated: {len(shifts_with_pay)} ({len(shifts_with_pay)/len(roster_entries)*100:.1f}%)")
        print(f"   Shifts without pay: {len(shifts_without_pay)} ({len(shifts_without_pay)/len(roster_entries)*100:.1f}%)")
        
        # Analyze pay by assignment status
        assigned_with_pay = [e for e in assigned_shifts if e.get('total_pay', 0) > 0]
        unassigned_with_pay = [e for e in unassigned_shifts if e.get('total_pay', 0) > 0]
        
        print(f"\n   üéØ Pay Summary Issues Analysis:")
        print(f"   Assigned shifts with pay: {len(assigned_with_pay)}/{len(assigned_shifts)}")
        print(f"   Unassigned shifts with pay: {len(unassigned_with_pay)}/{len(unassigned_shifts)}")
        
        if len(unassigned_with_pay) > 0:
            print(f"   ‚ö†Ô∏è  ISSUE: {len(unassigned_with_pay)} unassigned shifts have pay calculated")
            print(f"      This may cause issues in pay summary display")
            
            # Show examples
            for i, shift in enumerate(unassigned_with_pay[:3]):
                print(f"      Example {i+1}: {shift['date']} {shift['start_time']}-{shift['end_time']} - ${shift['total_pay']}")
        
        # Staff-specific pay analysis
        staff_pay_summary = {}
        for entry in assigned_shifts:
            staff_name = entry.get('staff_name', 'Unknown')
            if staff_name not in staff_pay_summary:
                staff_pay_summary[staff_name] = {
                    'shifts': 0,
                    'total_hours': 0,
                    'total_pay': 0
                }
            
            staff_pay_summary[staff_name]['shifts'] += 1
            staff_pay_summary[staff_name]['total_hours'] += entry.get('hours_worked', 0)
            staff_pay_summary[staff_name]['total_pay'] += entry.get('total_pay', 0)
        
        print(f"\n   üë• Staff Pay Summary (Top 5):")
        sorted_staff = sorted(staff_pay_summary.items(), key=lambda x: x[1]['total_pay'], reverse=True)
        for staff_name, data in sorted_staff[:5]:
            print(f"   {staff_name}: {data['shifts']} shifts, {data['total_hours']:.1f}h, ${data['total_pay']:.2f}")
        
        return True

    def test_active_staff_filter_review(self):
        """Test staff endpoint to verify active vs inactive staff - REVIEW REQUEST SPECIFIC"""
        print(f"\n‚úÖ Testing Active Staff Filter (Review Request)...")
        
        success, all_staff = self.run_test(
            "Get All Staff (Active Filter Test)",
            "GET",
            "api/staff",
            200
        )
        
        if not success:
            print("   ‚ùå Could not retrieve staff data")
            return False
        
        print(f"   Retrieved {len(all_staff)} staff members")
        
        # Analyze active vs inactive status
        active_staff = [s for s in all_staff if s.get('active', True)]
        inactive_staff = [s for s in all_staff if not s.get('active', True)]
        
        print(f"\n   üìä Staff Status Analysis:")
        print(f"   Active staff: {len(active_staff)}")
        print(f"   Inactive staff: {len(inactive_staff)}")
        
        # List all staff with their status
        print(f"\n   üë• Staff List with Status:")
        for staff in sorted(all_staff, key=lambda x: x['name']):
            status = "‚úÖ Active" if staff.get('active', True) else "‚ùå Inactive"
            print(f"   {staff['name']}: {status}")
        
        # Check if the API is properly filtering (should only return active staff)
        if len(inactive_staff) == 0:
            print(f"\n   ‚úÖ Staff endpoint correctly returns only active staff")
        else:
            print(f"\n   ‚ö†Ô∏è  Staff endpoint returns inactive staff - may need filtering")
        
        return True

    def run_review_request_tests(self):
        """Run comprehensive tests for the review request issues"""
        print("\n" + "="*80)
        print("üéØ REVIEW REQUEST COMPREHENSIVE TESTING")
        print("="*80)
        print("Testing specific issues mentioned in the review request:")
        print("1. Staff Profile Updates")
        print("2. Shift Assignment (PUT /api/roster/{id})")
        print("3. Pay Summary Data Analysis")
        print("4. Active Staff Filter")
        print("="*80)
        
        test_results = {}
        
        # Test 1: Staff Profile Updates
        print("\n" + "="*50)
        print("1. STAFF PROFILE UPDATES TEST")
        print("="*50)
        test_results['staff_profile_updates'] = self.test_staff_profile_updates_review()
        
        # Test 2: Shift Assignment
        print("\n" + "="*50)
        print("2. SHIFT ASSIGNMENT UPDATES TEST")
        print("="*50)
        test_results['shift_assignment'] = self.test_shift_assignment_updates_review()
        
        # Test 3: Pay Summary Data Analysis
        print("\n" + "="*50)
        print("3. PAY SUMMARY DATA ANALYSIS")
        print("="*50)
        test_results['pay_summary_analysis'] = self.analyze_pay_summary_data_review()
        
        # Test 4: Active Staff Filter
        print("\n" + "="*50)
        print("4. ACTIVE STAFF FILTER TEST")
        print("="*50)
        test_results['active_staff_filter'] = self.test_active_staff_filter_review()
        
        # Summary
        print("\n" + "="*80)
        print("üéØ REVIEW REQUEST TEST RESULTS SUMMARY")
        print("="*80)
        
        passed_tests = sum(1 for result in test_results.values() if result)
        total_tests = len(test_results)
        
        for test_name, result in test_results.items():
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            print(f"{test_name.replace('_', ' ').title()}: {status}")
        
        print(f"\nOverall Results: {passed_tests}/{total_tests} tests passed")
        
        if passed_tests == total_tests:
            print("\nüéâ ALL REVIEW REQUEST TESTS PASSED!")
        else:
            print(f"\n‚ö†Ô∏è  {total_tests - passed_tests} test(s) failed - see details above")
        
        return passed_tests == total_tests

    def test_roster_update_overlap_handling(self):
        """Test roster update endpoint specifically for overlap handling as requested"""
        print(f"\nüéØ Testing Roster Update Endpoint Overlap Handling...")
        
        # Test date for overlap testing
        test_date = "2025-12-20"
        
        # Step 1: Create an initial roster entry to update
        initial_shift = {
            "id": "",  # Will be auto-generated
            "date": test_date,
            "shift_template_id": "test-update-overlap-1",
            "staff_id": None,
            "staff_name": None,
            "start_time": "09:00",
            "end_time": "17:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "allow_overlap": False,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, created_shift = self.run_test(
            "Create Initial Shift for Update Testing",
            "POST",
            "api/roster/add-shift",
            200,
            data=initial_shift
        )
        
        if not success or 'id' not in created_shift:
            print("   ‚ö†Ô∏è  Could not create initial shift for update testing")
            return False
        
        shift_id = created_shift['id']
        print(f"   ‚úÖ Created initial shift with ID: {shift_id}")
        
        # Step 2: Create a conflicting shift to test overlap detection
        conflicting_shift = {
            "id": "",
            "date": test_date,
            "shift_template_id": "test-update-overlap-conflict",
            "staff_id": None,
            "staff_name": None,
            "start_time": "15:00",  # Overlaps with initial shift
            "end_time": "20:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "allow_overlap": False,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, created_conflict = self.run_test(
            "Create Conflicting Shift",
            "POST",
            "api/roster/add-shift",
            200,
            data=conflicting_shift
        )
        
        if not success:
            print("   ‚ö†Ô∏è  Could not create conflicting shift")
            return False
        
        print(f"   ‚úÖ Created conflicting shift: {conflicting_shift['start_time']}-{conflicting_shift['end_time']}")
        
        # Step 3: Test updating shift without allow_overlap (should fail)
        updated_shift_no_overlap = {
            **created_shift,
            "start_time": "14:00",  # Would overlap with conflicting shift
            "end_time": "18:00",
            "allow_overlap": False
        }
        
        success, response = self.run_test(
            "Update Shift Without Allow Overlap (Should Fail)",
            "PUT",
            f"api/roster/{shift_id}",
            409,  # Expect conflict status
            data=updated_shift_no_overlap
        )
        
        if success:  # Success here means we got the expected 409 status
            print(f"   ‚úÖ Overlap correctly detected and prevented without allow_overlap")
        else:
            print(f"   ‚ùå Overlap detection failed - update was allowed without allow_overlap")
        
        # Step 4: Test updating shift with allow_overlap=True (should succeed)
        updated_shift_with_overlap = {
            **created_shift,
            "start_time": "14:00",  # Would overlap with conflicting shift
            "end_time": "18:00",
            "allow_overlap": True  # This should bypass overlap detection
        }
        
        success, response = self.run_test(
            "Update Shift With Allow Overlap=True (Should Succeed)",
            "PUT",
            f"api/roster/{shift_id}",
            200,  # Expect success
            data=updated_shift_with_overlap
        )
        
        if success:
            print(f"   ‚úÖ Update succeeded with allow_overlap=True")
            print(f"   Updated shift: {response.get('start_time')}-{response.get('end_time')}")
            print(f"   Allow overlap flag: {response.get('allow_overlap')}")
        else:
            print(f"   ‚ùå Update failed even with allow_overlap=True")
        
        # Step 5: Test 2:1 shift functionality with is_2_to_1 field
        # Note: Backend uses "2:1" in shift name, but testing if is_2_to_1 field is accepted
        shift_2_to_1_test = {
            **created_shift,
            "start_time": "16:00",  # Would overlap with conflicting shift
            "end_time": "22:00",
            "is_2_to_1": True,  # Testing if backend accepts this field
            "allow_overlap": True
        }
        
        success, response = self.run_test(
            "Update Shift With is_2_to_1=True and allow_overlap=True",
            "PUT",
            f"api/roster/{shift_id}",
            200,  # Expect success
            data=shift_2_to_1_test
        )
        
        if success:
            print(f"   ‚úÖ Update succeeded with is_2_to_1=True and allow_overlap=True")
            print(f"   Backend accepted is_2_to_1 field: {response.get('is_2_to_1', 'Field not returned')}")
        else:
            print(f"   ‚ùå Update failed with is_2_to_1=True")
        
        # Step 6: Test updating shift name to include "2:1" for automatic overlap bypass
        if self.staff_data:
            staff_member = self.staff_data[0]
            shift_with_2_to_1_name = {
                **created_shift,
                "start_time": "13:00",  # Would overlap with conflicting shift
                "end_time": "19:00",
                "staff_id": staff_member['id'],
                "staff_name": f"{staff_member['name']} - 2:1 Support",  # Include "2:1" in name
                "allow_overlap": False  # Test if "2:1" in name bypasses overlap detection
            }
            
            success, response = self.run_test(
                "Update Shift With '2:1' in Staff Name (Should Bypass Overlap)",
                "PUT",
                f"api/roster/{shift_id}",
                200,  # Expect success due to "2:1" in name
                data=shift_with_2_to_1_name
            )
            
            if success:
                print(f"   ‚úÖ Update succeeded with '2:1' in staff name (automatic bypass)")
                print(f"   Staff assignment: {response.get('staff_name')}")
            else:
                print(f"   ‚ùå Update failed even with '2:1' in staff name")
        
        return True

    def test_critical_overlap_handling_fix(self):
        """Test the critical fix for overlap handling in the PUT endpoint"""
        print(f"\nüéØ CRITICAL TEST: Testing Overlap Handling Fix in PUT Endpoint...")
        print("   This test verifies that PUT /api/roster/{id} now respects the allow_overlap flag")
        
        # Test date for overlap testing
        test_date = "2025-12-20"
        
        # Step 1: Create first shift
        shift1 = {
            "id": "",  # Will be auto-generated
            "date": test_date,
            "shift_template_id": "overlap-test-1",
            "staff_id": None,
            "staff_name": None,
            "start_time": "09:00",
            "end_time": "17:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "allow_overlap": False,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, created_shift1 = self.run_test(
            "Create First Shift for Overlap Testing",
            "POST",
            "api/roster/add-shift",
            200,
            data=shift1
        )
        
        if not success:
            print("   ‚ùå Could not create first shift for overlap testing")
            return False
        
        shift1_id = created_shift1.get('id')
        print(f"   ‚úÖ Created first shift: {shift1['start_time']}-{shift1['end_time']} (ID: {shift1_id})")
        
        # Step 2: Create second shift that will be updated to overlap
        shift2 = {
            "id": "",  # Will be auto-generated
            "date": test_date,
            "shift_template_id": "overlap-test-2",
            "staff_id": None,
            "staff_name": None,
            "start_time": "18:00",  # Non-overlapping initially
            "end_time": "22:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "allow_overlap": False,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, created_shift2 = self.run_test(
            "Create Second Shift (Non-overlapping)",
            "POST",
            "api/roster/add-shift",
            200,
            data=shift2
        )
        
        if not success:
            print("   ‚ùå Could not create second shift for overlap testing")
            return False
        
        shift2_id = created_shift2.get('id')
        print(f"   ‚úÖ Created second shift: {shift2['start_time']}-{shift2['end_time']} (ID: {shift2_id})")
        
        # Step 3: Test updating shift with allow_overlap=True (should succeed)
        print(f"\n   üéØ CRITICAL TEST 1: Update shift with allow_overlap=True")
        updated_shift2_allow = {
            **created_shift2,
            "start_time": "15:00",  # This would overlap with first shift (09:00-17:00)
            "end_time": "20:00",
            "allow_overlap": True  # This should allow the overlap
        }
        
        success, response = self.run_test(
            "Update Shift with allow_overlap=True (Should Succeed)",
            "PUT",
            f"api/roster/{shift2_id}",
            200,  # Should succeed with 200
            data=updated_shift2_allow
        )
        
        test1_passed = success
        if success:
            print(f"   ‚úÖ CRITICAL TEST 1 PASSED: Shift update with allow_overlap=True succeeded")
            print(f"      Updated shift now: {updated_shift2_allow['start_time']}-{updated_shift2_allow['end_time']}")
        else:
            print(f"   ‚ùå CRITICAL TEST 1 FAILED: Shift update with allow_overlap=True was blocked")
            print(f"      This indicates the PUT endpoint fix is not working correctly")
        
        # Step 4: Test updating shift with allow_overlap=False (should fail)
        print(f"\n   üéØ CRITICAL TEST 2: Update shift with allow_overlap=False")
        updated_shift2_no_allow = {
            **created_shift2,
            "start_time": "14:00",  # This would overlap with first shift (09:00-17:00)
            "end_time": "19:00",
            "allow_overlap": False  # This should prevent the overlap
        }
        
        success, response = self.run_test(
            "Update Shift with allow_overlap=False (Should Fail)",
            "PUT",
            f"api/roster/{shift2_id}",
            409,  # Should fail with 409 Conflict
            data=updated_shift2_no_allow
        )
        
        test2_passed = success
        if success:  # Success here means we got the expected 409 status
            print(f"   ‚úÖ CRITICAL TEST 2 PASSED: Shift update with allow_overlap=False correctly blocked")
        else:
            print(f"   ‚ùå CRITICAL TEST 2 FAILED: Shift update with allow_overlap=False was not blocked")
            print(f"      This indicates overlap detection is not working properly")
        
        # Step 5: Test 2:1 functionality with both is_2_to_1=True and allow_overlap=True
        print(f"\n   üéØ CRITICAL TEST 3: Test 2:1 shift with allow_overlap=True")
        
        # Create a shift with "2:1" in the name
        shift_2to1 = {
            "id": "",  # Will be auto-generated
            "date": test_date,
            "shift_template_id": "2to1-test",
            "staff_id": None,
            "staff_name": None,
            "start_time": "20:00",  # Non-overlapping initially
            "end_time": "23:00",
            "is_sleepover": False,
            "is_public_holiday": False,
            "allow_overlap": False,
            "hours_worked": 0.0,
            "base_pay": 0.0,
            "sleepover_allowance": 0.0,
            "total_pay": 0.0
        }
        
        success, created_2to1_shift = self.run_test(
            "Create 2:1 Shift for Testing",
            "POST",
            "api/roster/add-shift",
            200,
            data=shift_2to1
        )
        
        if not success:
            print("   ‚ùå Could not create 2:1 shift for testing")
            return False
        
        shift_2to1_id = created_2to1_shift.get('id')
        
        # Now update it to overlap with both allow_overlap=True and 2:1 name
        # First, we need to get a shift template with "2:1" in the name
        success, shift_templates = self.run_test(
            "Get Shift Templates to Find 2:1 Template",
            "GET",
            "api/shift-templates",
            200
        )
        
        template_2to1_id = None
        if success:
            for template in shift_templates:
                if "2:1" in template.get('name', '').lower():
                    template_2to1_id = template.get('id')
                    print(f"   Found 2:1 template: {template.get('name')} (ID: {template_2to1_id})")
                    break
        
        if not template_2to1_id:
            print("   ‚ö†Ô∏è  No 2:1 shift template found, creating manual test")
            template_2to1_id = "manual-2to1-test"
        
        updated_2to1_shift = {
            **created_2to1_shift,
            "shift_template_id": template_2to1_id,
            "start_time": "16:00",  # This would overlap with first shift (09:00-17:00)
            "end_time": "21:00",
            "allow_overlap": True  # Both 2:1 and allow_overlap should enable overlap
        }
        
        success, response = self.run_test(
            "Update 2:1 Shift with allow_overlap=True (Should Succeed)",
            "PUT",
            f"api/roster/{shift_2to1_id}",
            200,  # Should succeed
            data=updated_2to1_shift
        )
        
        test3_passed = success
        if success:
            print(f"   ‚úÖ CRITICAL TEST 3 PASSED: 2:1 shift with allow_overlap=True succeeded")
            print(f"      This confirms both 2:1 detection and allow_overlap flag work together")
        else:
            print(f"   ‚ùå CRITICAL TEST 3 FAILED: 2:1 shift with allow_overlap=True was blocked")
        
        # Summary of critical tests
        print(f"\n   üìä CRITICAL OVERLAP HANDLING FIX SUMMARY:")
        test1_status = "‚úÖ PASSED" if test1_passed else "‚ùå FAILED"
        test2_status = "‚úÖ PASSED" if test2_passed else "‚ùå FAILED"
        test3_status = "‚úÖ PASSED" if test3_passed else "‚ùå FAILED"
        
        print(f"      Test 1 (allow_overlap=True): {test1_status}")
        print(f"      Test 2 (allow_overlap=False): {test2_status}")
        print(f"      Test 3 (2:1 + allow_overlap=True): {test3_status}")
        
        # The fix is working if all tests passed
        fix_working = test1_passed and test2_passed and test3_passed
        
        if fix_working:
            print(f"   üéâ CRITICAL FIX VERIFICATION: PUT endpoint now correctly respects allow_overlap flag!")
        else:
            print(f"   üö® CRITICAL ISSUE: PUT endpoint fix may not be working correctly")
            print(f"      Required fix: Update line 1046 to check 'if not entry.allow_overlap and check_shift_overlap(...)'")
        
        return fix_working

    def test_12pm_8pm_pay_calculation_fix(self):
        """Test the critical pay calculation fix for 12:00PM-8:00PM weekday shifts"""
        print(f"\nüéØ CRITICAL BUG FIX VERIFICATION: Testing 12:00PM-8:00PM Pay Calculation Fix...")
        print("   Problem: 12:00PM-8:00PM shifts were calculating at evening rate ($44.50) instead of day rate ($42.00)")
        print("   Fix: Changed backend determine_shift_type() from 'end_minutes >= 20 * 60' to 'end_minutes > 20 * 60'")
        print("   Expected: 12:00PM-8:00PM should be WEEKDAY_DAY and calculate at $336.00 (8 hrs √ó $42.00)")
        
        # Clear existing roster entries for January 2025 to avoid overlap issues
        print("\n   üßπ Clearing existing roster entries for January 2025...")
        success, response = self.run_test(
            "Clear January 2025 Roster",
            "DELETE",
            "api/roster/month/2025-01",
            200
        )
        if success:
            print(f"   ‚úÖ Cleared existing roster entries")
        
        # Test cases for the critical bug fix
        critical_test_cases = [
            {
                "name": "üéØ CRITICAL: 12:00PM-8:00PM Weekday Shift (Bug Fix Verification)",
                "date": "2025-01-06",  # Monday
                "start_time": "12:00",
                "end_time": "20:00",
                "expected_hours": 8.0,
                "expected_rate": 42.00,  # Should be DAY rate, not EVENING
                "expected_pay": 336.00,  # 8 * 42.00
                "shift_type": "WEEKDAY_DAY",
                "is_critical": True
            },
            {
                "name": "üéØ EDGE CASE: 12:00PM-7:59PM Weekday Shift (Should be DAY)",
                "date": "2025-01-07",  # Tuesday
                "start_time": "12:00",
                "end_time": "19:59",
                "expected_hours": 7.98,  # 7 hours 59 minutes
                "expected_rate": 42.00,  # Should be DAY rate
                "expected_pay": 335.16,  # 7.98 * 42.00
                "shift_type": "WEEKDAY_DAY",
                "is_critical": True
            },
            {
                "name": "üéØ EDGE CASE: 12:00PM-8:01PM Weekday Shift (Should be EVENING)",
                "date": "2025-01-08",  # Wednesday
                "start_time": "12:00",
                "end_time": "20:01",
                "expected_hours": 8.02,  # 8 hours 1 minute
                "expected_rate": 44.50,  # Should be EVENING rate
                "expected_pay": 356.89,  # 8.02 * 44.50
                "shift_type": "WEEKDAY_EVENING",
                "is_critical": True
            },
            {
                "name": "üéØ CONTROL: 8:00PM-10:00PM Weekday Shift (Should be EVENING)",
                "date": "2025-01-09",  # Thursday
                "start_time": "20:00",
                "end_time": "22:00",
                "expected_hours": 2.0,
                "expected_rate": 44.50,  # Should be EVENING rate
                "expected_pay": 89.00,  # 2 * 44.50
                "shift_type": "WEEKDAY_EVENING",
                "is_critical": False
            },
            {
                "name": "üéØ REGRESSION: 7:30AM-3:30PM Weekday Shift (Should remain DAY)",
                "date": "2025-01-10",  # Friday
                "start_time": "07:30",
                "end_time": "15:30",
                "expected_hours": 8.0,
                "expected_rate": 42.00,  # Should be DAY rate
                "expected_pay": 336.00,  # 8 * 42.00
                "shift_type": "WEEKDAY_DAY",
                "is_critical": False
            }
        ]
        
        critical_tests_passed = 0
        critical_tests_total = sum(1 for case in critical_test_cases if case.get('is_critical', False))
        all_tests_passed = 0
        
        print(f"\n   Running {len(critical_test_cases)} test cases ({critical_tests_total} critical)...")
        
        for i, test_case in enumerate(critical_test_cases):
            is_critical = test_case.get('is_critical', False)
            print(f"\n   {'üéØ CRITICAL TEST' if is_critical else 'üìã TEST'} {i+1}: {test_case['name']}")
            
            # Create roster entry for testing
            roster_entry = {
                "id": "",  # Will be auto-generated
                "date": test_case["date"],
                "shift_template_id": f"pay-fix-test-{i+1}",
                "start_time": test_case["start_time"],
                "end_time": test_case["end_time"],
                "is_sleepover": False,
                "is_public_holiday": False,
                "staff_id": None,
                "staff_name": None,
                "hours_worked": 0.0,
                "base_pay": 0.0,
                "sleepover_allowance": 0.0,
                "total_pay": 0.0,
                "allow_overlap": True  # Allow overlap to avoid conflicts with existing data
            }
            
            success, response = self.run_test(
                f"POST /api/roster/add-shift - {test_case['name']}",
                "POST",
                "api/roster/add-shift",
                200,
                data=roster_entry
            )
            
            if success:
                hours_worked = response.get('hours_worked', 0)
                total_pay = response.get('total_pay', 0)
                base_pay = response.get('base_pay', 0)
                
                print(f"      üìä Results:")
                print(f"         Hours worked: {hours_worked} (expected: {test_case['expected_hours']})")
                print(f"         Total pay: ${total_pay:.2f} (expected: ${test_case['expected_pay']:.2f})")
                print(f"         Expected shift type: {test_case['shift_type']}")
                
                # Check calculations with tolerance for floating point precision
                hours_correct = abs(hours_worked - test_case['expected_hours']) < 0.05
                pay_correct = abs(total_pay - test_case['expected_pay']) < 0.50  # Allow 50 cent tolerance
                
                if hours_correct and pay_correct:
                    print(f"      ‚úÖ {'CRITICAL ' if is_critical else ''}TEST PASSED")
                    all_tests_passed += 1
                    if is_critical:
                        critical_tests_passed += 1
                else:
                    print(f"      ‚ùå {'CRITICAL ' if is_critical else ''}TEST FAILED")
                    if not hours_correct:
                        print(f"         ‚ùå Hours mismatch: got {hours_worked}, expected {test_case['expected_hours']}")
                    if not pay_correct:
                        print(f"         ‚ùå Pay mismatch: got ${total_pay:.2f}, expected ${test_case['expected_pay']:.2f}")
                        
                        # Calculate what rate was actually used
                        if hours_worked > 0:
                            actual_rate = total_pay / hours_worked
                            print(f"         üìä Actual rate used: ${actual_rate:.2f}/hr (expected: ${test_case['expected_rate']:.2f}/hr)")
                            
                            if abs(actual_rate - 44.50) < 0.01:
                                print(f"         üö® ISSUE: Using EVENING rate instead of DAY rate!")
                            elif abs(actual_rate - 42.00) < 0.01:
                                print(f"         ‚úÖ Using correct DAY rate")
                    
                    if is_critical:
                        print(f"      üö® CRITICAL BUG FIX VERIFICATION FAILED!")
                        print(f"         The 12:00PM-8:00PM pay calculation fix may not be working correctly")
            else:
                print(f"      ‚ùå {'CRITICAL ' if is_critical else ''}TEST FAILED - Could not create roster entry")
                if is_critical:
                    print(f"      üö® CRITICAL TEST COULD NOT BE EXECUTED!")
        
        # Summary
        print(f"\n   üìä PAY CALCULATION FIX TEST RESULTS:")
        print(f"      Critical tests passed: {critical_tests_passed}/{critical_tests_total}")
        print(f"      Total tests passed: {all_tests_passed}/{len(critical_test_cases)}")
        
        if critical_tests_passed == critical_tests_total:
            print(f"      ‚úÖ ALL CRITICAL PAY CALCULATION TESTS PASSED!")
            print(f"      ‚úÖ 12:00PM-8:00PM bug fix is working correctly")
        else:
            print(f"      ‚ùå CRITICAL PAY CALCULATION TESTS FAILED!")
            print(f"      ‚ùå 12:00PM-8:00PM bug fix needs attention")
            
        if all_tests_passed == len(critical_test_cases):
            print(f"      ‚úÖ No regression detected in other pay calculations")
        else:
            print(f"      ‚ö†Ô∏è  Some regression tests failed - review other pay calculations")
        
        return critical_tests_passed == critical_tests_total

def main():
    print("üöÄ Starting Shift Roster & Pay Calculator API Tests")
    print("üéØ FOCUS: Critical Pay Calculation Fix for 12:00PM-8:00PM Shifts")
    print("=" * 80)
    
    tester = ShiftRosterAPITester()
    
    # Run basic health checks first
    print("\nüìã Running Basic Health Checks...")
    tester.test_health_check()
    tester.test_get_staff()
    tester.test_get_settings()
    
    # Run the critical pay calculation fix test
    print("\n" + "="*80)
    print("üéØ CRITICAL PAY CALCULATION FIX TEST")
    print("="*80)
    success = tester.test_12pm_8pm_pay_calculation_fix()
    
    print(f"\nüèÅ Critical Pay Calculation Test Complete!")
    print(f"Result: {'‚úÖ PASSED' if success else '‚ùå FAILED'}")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())